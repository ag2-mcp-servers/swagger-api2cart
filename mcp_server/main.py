# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:38:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query

from models import (
    AccountCartAdd,
    CartConfigUpdate,
    CartCouponAdd,
    CartId,
    CustomerAdd,
    Entity,
    HybrisWebsites,
    Key,
    ModelResponseAttributeList,
    ModelResponseCartCatalogPriceRulesList,
    ModelResponseCartCouponList,
    ModelResponseCartGiftCardList,
    ModelResponseCartMetaDataList,
    ModelResponseCartScriptList,
    ModelResponseCategoryList,
    ModelResponseCustomerAttributeList,
    ModelResponseCustomerGroupList,
    ModelResponseCustomerList,
    ModelResponseOrderAbandonedList,
    ModelResponseOrderList,
    ModelResponseOrderPreestimateShippingList,
    ModelResponseOrderShipmentList,
    ModelResponseOrderTransactionList,
    ModelResponseProductAttributeList,
    ModelResponseProductChildItemList,
    ModelResponseProductList,
    Operator,
    Options,
    OrderAdd,
    OrderPreestimateShippingList,
    OrderRefundAdd,
    OrderShipmentAdd,
    OrderShipmentTrackingAdd,
    OrderShipmentUpdate,
    OrderStatusIds,
    ProductAdd,
    ProductAttributes,
    ProductImageAdd,
    ProductPriceAdd,
    ProductPriceUpdate,
    ProductTaxAdd,
    ProductVariantAdd,
    ProductVariantImageAdd,
    ProductVariantPriceAdd,
    ProductVariantPriceUpdate,
    Type2,
    Type4,
    Type6,
)
from models.Account.cart.add import JsonPostResponse
from models.Account.cart.list import JsonGetResponse
from models.Account.config.update import JsonPutResponse
from models.Account.failedWebhooks import JsonGetResponse
from models.Account.supportedPlatforms import JsonGetResponse
from models.Attribute.add import JsonPostResponse
from models.Attribute.assign.group import JsonPostResponse
from models.Attribute.assign.set import JsonPostResponse
from models.Attribute.attributeset.list import JsonGetResponse
from models.Attribute.count import JsonGetResponse
from models.Attribute.delete import JsonDeleteResponse
from models.Attribute.group.list import JsonGetResponse
from models.Attribute.info import JsonGetResponse
from models.Attribute.type.list import JsonGetResponse
from models.Attribute.unassign.group import JsonPostResponse
from models.Attribute.unassign.set import JsonPostResponse
from models.Attribute.update import JsonPostResponse
from models.Basket.info import JsonGetResponse
from models.Basket.item.add import JsonPostResponse
from models.Basket.liveShippingService.create import JsonPostResponse
from models.Basket.liveShippingService.delete import JsonDeleteResponse
from models.Basket.liveShippingService.list import JsonGetResponse
from models.Bridge.delete import JsonPostResponse
from models.Bridge.update import JsonPostResponse
from models.Cart.bridge import JsonGetResponse
from models.Cart.catalogPriceRules.count import JsonGetResponse
from models.Cart.clearCache import JsonPostResponse
from models.Cart.config import JsonGetResponse
from models.Cart.config.update import JsonPutResponse
from models.Cart.coupon.add import JsonPostResponse
from models.Cart.coupon.condition.add import JsonPostResponse
from models.Cart.coupon.count import JsonGetResponse
from models.Cart.coupon.delete import JsonDeleteResponse
from models.Cart.create import JsonPostResponse
from models.Cart.delete import JsonDeleteResponse
from models.Cart.disconnect import JsonGetResponse
from models.Cart.giftcard.add import JsonPostResponse
from models.Cart.giftcard.count import JsonGetResponse
from models.Cart.info import JsonGetResponse
from models.Cart.list import JsonGetResponse
from models.Cart.metaData.set import JsonPostResponse
from models.Cart.metaData.unset import JsonDeleteResponse
from models.Cart.methods import JsonGetResponse
from models.Cart.plugin.list import JsonGetResponse
from models.Cart.script.add import JsonPostResponse
from models.Cart.script.delete import JsonDeleteResponse
from models.Cart.shippingZones.list import JsonGetResponse
from models.Cart.validate import JsonGetResponse
from models.Category.add import JsonPostResponse
from models.Category.assign import JsonPostResponse
from models.Category.count import JsonGetResponse
from models.Category.delete import JsonDeleteResponse
from models.Category.find import JsonGetResponse
from models.Category.image.add import JsonPostResponse
from models.Category.image.delete import JsonDeleteResponse
from models.Category.info import JsonGetResponse
from models.Category.unassign import JsonPostResponse
from models.Category.update import JsonPutResponse
from models.Customer.add import JsonPostResponse
from models.Customer.count import JsonGetResponse
from models.Customer.find import JsonGetResponse
from models.Customer.group.add import JsonPostResponse
from models.Customer.info import JsonGetResponse
from models.Customer.update import JsonPutResponse
from models.Order.add import JsonPostResponse
from models.Order.count import JsonGetResponse
from models.Order.financialStatus.list import JsonGetResponse
from models.Order.find import JsonGetResponse
from models.Order.fulfillmentStatus.list import JsonGetResponse
from models.Order.info import JsonGetResponse
from models.Order.refund.add import JsonPostResponse
from models.Order.shipment.add import JsonPostResponse
from models.Order.shipment.delete import JsonDeleteResponse
from models.Order.shipment.tracking.add import JsonPostResponse
from models.Order.shipment.update import JsonPutResponse
from models.Order.status.list import JsonGetResponse
from models.Order.update import JsonPutResponse
from models.Product.add import JsonPostResponse
from models.Product.attribute.value.set import JsonPostResponse
from models.Product.attribute.value.unset import JsonPostResponse
from models.Product.brand.list import JsonGetResponse
from models.Product.childItem.find import JsonGetResponse
from models.Product.childItem.info import JsonGetResponse
from models.Product.count import JsonGetResponse
from models.Product.currency.add import JsonPostResponse
from models.Product.currency.list import JsonGetResponse
from models.Product.delete import JsonDeleteResponse
from models.Product.fields import JsonGetResponse
from models.Product.find import JsonGetResponse
from models.Product.image.add import JsonPostResponse
from models.Product.image.delete import JsonDeleteResponse
from models.Product.image.update import JsonPutResponse
from models.Product.info import JsonGetResponse
from models.Product.manufacturer.add import JsonPostResponse
from models.Product.option.add import JsonPostResponse
from models.Product.option.assign import JsonPostResponse
from models.Product.option.list import JsonGetResponse
from models.Product.option.value.add import JsonPostResponse
from models.Product.option.value.assign import JsonPostResponse
from models.Product.option.value.update import JsonPutResponse
from models.Product.price.add import JsonPostResponse
from models.Product.price.delete import JsonDeleteResponse
from models.Product.price.update import JsonPutResponse
from models.Product.review.list import JsonGetResponse
from models.Product.store.assign import JsonPostResponse
from models.Product.tax.add import JsonPostResponse
from models.Product.update import JsonPutResponse
from models.Product.variant.add import JsonPostResponse
from models.Product.variant.count import JsonGetResponse
from models.Product.variant.delete import JsonDeleteResponse
from models.Product.variant.image.add import JsonPostResponse
from models.Product.variant.image.delete import JsonDeleteResponse
from models.Product.variant.info import JsonGetResponse
from models.Product.variant.list import JsonGetResponse
from models.Product.variant.price.add import JsonPostResponse
from models.Product.variant.price.delete import JsonDeleteResponse
from models.Product.variant.price.update import JsonPutResponse
from models.Product.variant.update import JsonPutResponse
from models.Subscriber.list import JsonGetResponse
from models.Tax.class_.info import JsonGetResponse
from models.Webhook.count import JsonGetResponse
from models.Webhook.create import JsonPostResponse
from models.Webhook.delete import JsonDeleteResponse
from models.Webhook.events import JsonGetResponse
from models.Webhook.list import JsonGetResponse
from models.Webhook.update import JsonPutResponse

app = MCPProxy(
    contact={'email': 'contact@api2cart.com', 'x-twitter': 'API2Cart'},
    description='API2Cart',
    termsOfService='https://api2cart.com/terms-service',
    title='Swagger API2Cart',
    version='1.1',
    servers=[{'url': 'https://api.api2cart.com/v1.1'}],
)


@app.post(
    '/account.cart.add.json',
    description=""" Add store to the account """,
    tags=['basket_operations', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def account_cart_add(body: AccountCartAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account.cart.list.json',
    description=""" Get list of carts. """,
    tags=['bridge_configuration_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def account_cart_list(
    params: Optional[str] = 'force_all',
    exclude: Optional[str] = None,
    request_from_date: Optional[str] = None,
    request_to_date: Optional[str] = None,
    store_url: Optional[str] = None,
    store_key: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account.config.update.json',
    description=""" Update configs in the API2Cart database. """,
    tags=['bridge_configuration_management', 'account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def account_config_update(
    new_store_key: Optional[str] = None,
    bridge_url: Optional[str] = None,
    store_root: Optional[str] = None,
    db_tables_prefix: Optional[str] = None,
    field_3dcart_private_key: Optional[str] = Query(None, alias='3dcart_private_key'),
    field_3dcart_access_token: Optional[str] = Query(None, alias='3dcart_access_token'),
    field_3dcartapi_api_key: Optional[str] = Query(None, alias='3dcartapi_api_key'),
    amazon_sp_client_id: Optional[str] = None,
    amazon_sp_client_secret: Optional[str] = None,
    amazon_sp_aws_user_key_id: Optional[str] = None,
    amazon_sp_aws_user_secret: Optional[str] = None,
    amazon_sp_aws_region: Optional[str] = None,
    amazon_sp_aws_role_arn: Optional[str] = None,
    amazon_sp_refresh_token: Optional[str] = None,
    amazon_sp_api_environment: Optional[str] = 'production',
    amazon_access_token: Optional[str] = None,
    amazon_seller_id: Optional[str] = None,
    amazon_marketplaces_ids: Optional[str] = None,
    amazon_secret_key: Optional[str] = None,
    amazon_access_key_id: Optional[str] = None,
    aspdotnetstorefront_api_user: Optional[str] = None,
    aspdotnetstorefront_api_pass: Optional[str] = None,
    bigcommerceapi_admin_account: Optional[str] = None,
    bigcommerceapi_api_path: Optional[str] = None,
    bigcommerceapi_api_key: Optional[str] = None,
    bigcommerceapi_client_id: Optional[str] = None,
    bigcommerceapi_access_token: Optional[str] = None,
    bigcommerceapi_context: Optional[str] = None,
    demandware_client_id: Optional[str] = None,
    demandware_api_password: Optional[str] = None,
    demandware_user_name: Optional[str] = None,
    demandware_user_password: Optional[str] = None,
    ebay_client_id: Optional[str] = None,
    ebay_client_secret: Optional[str] = None,
    ebay_runame: Optional[str] = None,
    ebay_access_token: Optional[str] = None,
    ebay_refresh_token: Optional[str] = None,
    ebay_environment: Optional[str] = None,
    ebay_site_id: Optional[int] = 0,
    ecwid_acess_token: Optional[str] = None,
    ecwid_store_id: Optional[str] = None,
    etsy_keystring: Optional[str] = None,
    etsy_shared_secret: Optional[str] = None,
    etsy_access_token: Optional[str] = None,
    etsy_token_secret: Optional[str] = None,
    etsy_client_id: Optional[str] = None,
    etsy_refresh_token: Optional[str] = None,
    neto_api_key: Optional[str] = None,
    neto_api_username: Optional[str] = None,
    shopify_api_key: Optional[str] = None,
    shopify_api_password: Optional[str] = None,
    shopify_shared_secret: Optional[str] = None,
    shopify_access_token: Optional[str] = None,
    shopware_access_key: Optional[str] = None,
    shopware_api_key: Optional[str] = None,
    shopware_api_secret: Optional[str] = None,
    volusion_login: Optional[str] = None,
    volusion_password: Optional[str] = None,
    walmart_client_id: Optional[str] = None,
    walmart_client_secret: Optional[str] = None,
    walmart_environment: Optional[str] = 'production',
    walmart_channel_type: Optional[str] = None,
    squarespace_api_key: Optional[str] = None,
    hybris_client_id: Optional[str] = None,
    hybris_client_secret: Optional[str] = None,
    hybris_username: Optional[str] = None,
    hybris_password: Optional[str] = None,
    hybris_websites: Optional[HybrisWebsites] = None,
    lightspeed_api_key: Optional[str] = None,
    lightspeed_api_secret: Optional[str] = None,
    commercehq_api_key: Optional[str] = None,
    commercehq_api_password: Optional[str] = None,
    wc_consumer_key: Optional[str] = None,
    wc_consumer_secret: Optional[str] = None,
    magento_consumer_key: Optional[str] = None,
    magento_consumer_secret: Optional[str] = None,
    magento_access_token: Optional[str] = None,
    magento_token_secret: Optional[str] = None,
    prestashop_webservice_key: Optional[str] = None,
    wix_app_id: Optional[str] = None,
    wix_app_secret_key: Optional[str] = None,
    wix_refresh_token: Optional[str] = None,
    mercado_libre_app_id: Optional[str] = None,
    mercado_libre_app_secret_key: Optional[str] = None,
    mercado_libre_refresh_token: Optional[str] = None,
    zid_client_id: Optional[int] = None,
    zid_client_secret: Optional[str] = None,
    zid_access_token: Optional[str] = None,
    zid_authorization: Optional[str] = None,
    zid_refresh_token: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account.failed_webhooks.json',
    description=""" List webhooks that was not delivered to the callback. """,
    tags=['customer_account_management', 'account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def account_failed_webhooks(
    count: Optional[int] = 10, start: Optional[int] = 0, ids: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account.supported_platforms.json',
    description=""" Get list of supported platforms """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def account_supported_platforms():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.add.json',
    description=""" Add new attribute """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_add(
    type: Type2,
    code: Optional[str] = None,
    name: str = ...,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    visible: Optional[bool] = False,
    required: Optional[bool] = False,
    position: Optional[int] = 0,
    attribute_group_id: Optional[str] = None,
    is_global: Optional[str] = 'Store',
    is_searchable: Optional[bool] = False,
    is_filterable: Optional[str] = 'No',
    is_comparable: Optional[bool] = False,
    is_html_allowed_on_front: Optional[bool] = False,
    is_filterable_in_search: Optional[bool] = False,
    is_configurable: Optional[bool] = False,
    is_visible_in_advanced_search: Optional[bool] = False,
    is_used_for_promo_rules: Optional[bool] = False,
    used_in_product_listing: Optional[bool] = False,
    used_for_sort_by: Optional[bool] = False,
    apply_to: Optional[str] = 'all_types',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.assign.group.json',
    description=""" Assign attribute to the group """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_assign_group(
    id: str, group_id: str = ..., attribute_set_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.assign.set.json',
    description=""" Assign attribute to the attribute set """,
    tags=[
        'account_management',
        'product_attribute_management',
        'shopping_cart_configuration',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_assign_set(
    id: str, group_id: Optional[str] = None, attribute_set_id: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.attributeset.list.json',
    description=""" Get attribute_set list """,
    tags=['customer_account_management', 'account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_attributeset_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.count.json',
    description=""" Get attributes count """,
    tags=['shopping_cart_configuration', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_count(
    type: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    visible: Optional[bool] = None,
    required: Optional[bool] = None,
    system: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/attribute.delete.json',
    description=""" Delete attribute from store """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_delete(store_id: Optional[str] = None, id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.group.list.json',
    description=""" Get attribute group list """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_group_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'id,name',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
    attribute_set_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.info.json',
    description=""" Get attribute info """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_info(
    id: str,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'force_all',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.list.json',
    description=""" Get attributes list """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    type: Optional[str] = None,
    attribute_ids: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'id,name,code,type',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
    visible: Optional[bool] = None,
    required: Optional[bool] = None,
    system: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attribute.type.list.json',
    description=""" Get list of supported attributes types """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_type_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.unassign.group.json',
    description=""" Unassign attribute from group """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_unassign_group(id: str, group_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.unassign.set.json',
    description=""" Unassign attribute from attribute set """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_unassign_set(id: str, attribute_set_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attribute.update.json',
    description=""" Update attribute data """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def attribute_update(
    id: str,
    name: str = ...,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/basket.info.json',
    description=""" Retrieve basket information. """,
    tags=['account_management', 'shopping_cart_operations', 'cart_metadata_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def basket_info(
    id: str,
    store_id: Optional[str] = None,
    params: Optional[str] = 'force_all',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/basket.item.add.json',
    description=""" Add item to basket """,
    tags=['basket_operations', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def basket_item_add(
    customer_id: str,
    product_id: str = ...,
    variant_id: Optional[str] = None,
    quantity: Optional[float] = 0,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/basket.live_shipping_service.create.json',
    description=""" Create live shipping rate service. (Beta) """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def basket_live_shipping_service_create(
    store_id: Optional[str] = None, name: str = ..., callback: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/basket.live_shipping_service.delete.json',
    description=""" Delete live shipping rate service. (Beta) """,
    tags=['account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def basket_live_shipping_service_delete(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/basket.live_shipping_service.list.json',
    description=""" Retrieve a list of live shipping rate services. (Beta) """,
    tags=[
        'basket_operations',
        'shopping_cart_operations',
        'shopping_cart_configuration',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def basket_live_shipping_service_list(
    store_id: Optional[str] = None, start: Optional[int] = 0, count: Optional[int] = 10
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bridge.delete.json',
    description=""" Delete bridge from the store. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def bridge_delete():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bridge.download.file',
    description=""" Download bridge for store """,
    tags=['shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def bridge_download(whitelabel: Optional[bool] = False):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bridge.update.json',
    description=""" Update bridge in the store. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def bridge_update():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.bridge.json',
    description=""" Get bridge key and store key """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def cart_bridge():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.catalog_price_rules.count.json',
    description=""" Get count of cart catalog price rules discounts. """,
    tags=['account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_catalog_price_rules_count():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.catalog_price_rules.list.json',
    description=""" Get cart catalog price rules discounts. """,
    tags=['account_management', 'customer_account_management', 'order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_catalog_price_rules_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    ids: Optional[str] = None,
    params: Optional[str] = 'id,name,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.clear_cache.json',
    description=""" Clear cache on store. """,
    tags=['shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_clear_cache(cache_type: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.config.json',
    description=""" Get list of cart configs """,
    tags=['bridge_configuration_management', 'shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_config(
    params: Optional[str] = 'store_name,store_url,db_prefix',
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/cart.config.update.json',
    description=""" Use this API method to update custom data in client database. """,
    tags=['shopping_cart_configuration', 'account_management', 'basket_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_config_update(body: CartConfigUpdate):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.coupon.add.json',
    description=""" Create new coupon """,
    tags=[
        'shopping_cart_coupon_management',
        'basket_operations',
        'shopping_cart_operations',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_coupon_add(body: CartCouponAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.coupon.condition.add.json',
    description=""" Create new coupon condition """,
    tags=['shopping_cart_coupon_management', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_coupon_condition_add(
    store_id: Optional[str] = None,
    coupon_id: str = ...,
    target: Optional[str] = 'coupon_prerequisite',
    entity: Entity = ...,
    key: Key = ...,
    operator: Operator = ...,
    value: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.coupon.count.json',
    description=""" Get cart coupons count. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_coupon_count(
    store_id: Optional[str] = None,
    date_start_from: Optional[str] = None,
    date_start_to: Optional[str] = None,
    date_end_from: Optional[str] = None,
    date_end_to: Optional[str] = None,
    avail: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/cart.coupon.delete.json',
    description=""" Delete coupon """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_coupon_delete(id: str, store_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.coupon.list.json',
    description=""" Get cart coupon discounts. """,
    tags=['shopping_cart_coupon_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_coupon_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    coupons_ids: Optional[str] = None,
    store_id: Optional[str] = None,
    date_start_from: Optional[str] = None,
    date_start_to: Optional[str] = None,
    date_end_from: Optional[str] = None,
    date_end_to: Optional[str] = None,
    avail: Optional[bool] = None,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'id,code,name,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.create.json',
    description=""" Add store to the account """,
    tags=[
        'account_management',
        'shopping_cart_configuration',
        'shopping_cart_operations',
        'bridge_configuration_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def cart_create(
    cart_id: CartId,
    store_url: str = ...,
    bridge_url: Optional[str] = None,
    store_root: Optional[str] = None,
    store_key: Optional[str] = None,
    shared_secret: Optional[str] = None,
    validate_version: Optional[bool] = False,
    verify: Optional[bool] = True,
    db_tables_prefix: Optional[str] = None,
    ftp_host: Optional[str] = None,
    ftp_user: Optional[str] = None,
    ftp_password: Optional[str] = None,
    ftp_port: Optional[int] = None,
    ftp_store_dir: Optional[str] = None,
    api_key_3dcart: Optional[str] = Query(None, alias='apiKey_3dcart'),
    admin_account: Optional[str] = Query(None, alias='AdminAccount'),
    api_path: Optional[str] = Query(None, alias='ApiPath'),
    api_key: Union[Optional[str], Optional[str], Optional[str], Optional[str]] = Query(
        None, alias='ApiKey'
    ),
    client_id: Optional[str] = None,
    access_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='accessToken'),
    context: Optional[str] = None,
    api_key_shopify: Optional[str] = Query(None, alias='apiKey_shopify'),
    api_password: Optional[str] = Query(None, alias='apiPassword'),
    access_token_shopify: Optional[str] = Query(None, alias='accessToken_shopify'),
    api_username: Optional[str] = Query(None, alias='apiUsername'),
    encrypted_password: Optional[str] = Query(None, alias='EncryptedPassword'),
    login: Optional[str] = Query(None, alias='Login'),
    api_user_adnsf: Optional[str] = Query(None, alias='apiUser_adnsf'),
    api_pass: Optional[str] = Query(None, alias='apiPass'),
    access_key_scelite: Optional[str] = Query(None, alias='accessKey_scelite'),
    api_key_scelite: Optional[str] = Query(None, alias='apiKey_scelite'),
    api_secret_key_scelite: Optional[str] = Query(None, alias='apiSecretKey_scelite'),
    private_key: Optional[str] = Query(None, alias='privateKey'),
    app_token: Optional[str] = Query(None, alias='appToken'),
    etsy_keystring: Optional[str] = None,
    etsy_shared_secret: Optional[str] = None,
    token_secret: Optional[str] = Query(None, alias='tokenSecret'),
    etsy_client_id: str = ...,
    etsy_refresh_token: str = ...,
    ebay_client_id: Optional[str] = None,
    ebay_client_secret: Optional[str] = None,
    ebay_runame: Optional[str] = None,
    ebay_access_token: Optional[str] = None,
    ebay_refresh_token: Optional[str] = None,
    ebay_environment: Optional[str] = 'production',
    ebay_site_id: Optional[int] = 0,
    dw_client_id: Optional[str] = None,
    dw_api_pass: Optional[str] = None,
    demandware_user_name: Optional[str] = None,
    demandware_user_password: Optional[str] = None,
    store_id: str = ...,
    seller_id: Optional[str] = None,
    amazon_secret_key: Optional[str] = None,
    amazon_access_key_id: Optional[str] = None,
    marketplaces_ids: Optional[str] = None,
    environment: Optional[str] = 'production',
    hybris_client_id: Optional[str] = None,
    hybris_client_secret: Optional[str] = None,
    hybris_username: Optional[str] = None,
    hybris_password: Optional[str] = None,
    hybris_websites: Optional[HybrisWebsites] = None,
    walmart_client_id: Optional[str] = None,
    walmart_client_secret: Optional[str] = None,
    walmart_environment: Optional[str] = 'production',
    walmart_channel_type: Optional[str] = None,
    lightspeed_api_key: Optional[str] = None,
    lightspeed_api_secret: Optional[str] = None,
    shopware_access_key: Optional[str] = None,
    shopware_api_key: Optional[str] = None,
    shopware_api_secret: Optional[str] = None,
    commercehq_api_key: Optional[str] = None,
    commercehq_api_password: Optional[str] = None,
    field_3dcart_private_key: Optional[str] = Query(None, alias='3dcart_private_key'),
    field_3dcart_access_token: Optional[str] = Query(None, alias='3dcart_access_token'),
    wc_consumer_key: Optional[str] = None,
    wc_consumer_secret: Optional[str] = None,
    magento_consumer_key: Optional[str] = None,
    magento_consumer_secret: Optional[str] = None,
    magento_access_token: Optional[str] = None,
    magento_token_secret: Optional[str] = None,
    prestashop_webservice_key: Optional[str] = None,
    wix_app_id: Optional[str] = None,
    wix_app_secret_key: Optional[str] = None,
    wix_refresh_token: Optional[str] = None,
    mercado_libre_app_id: Optional[str] = None,
    mercado_libre_app_secret_key: Optional[str] = None,
    mercado_libre_refresh_token: Optional[str] = None,
    zid_client_id: Optional[int] = None,
    zid_client_secret: Optional[str] = None,
    zid_access_token: Optional[str] = None,
    zid_authorization: Optional[str] = None,
    zid_refresh_token: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/cart.delete.json',
    description=""" Remove store from API2Cart """,
    tags=['bridge_configuration_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_delete(delete_bridge: Optional[bool] = True):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.disconnect.json',
    description=""" Disconnect with the store and clear store session data. """,
    tags=['bridge_configuration_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_disconnect(delete_bridge: Optional[bool] = False):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.giftcard.add.json',
    description=""" Create new gift card """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_giftcard_add(
    amount: float,
    code: Optional[str] = None,
    owner_email: Optional[str] = None,
    recipient_email: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.giftcard.count.json',
    description=""" Get gift cards count. """,
    tags=['shopping_cart_configuration', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_giftcard_count(store_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.giftcard.list.json',
    description=""" Get gift cards list. """,
    tags=['basket_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_giftcard_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    store_id: Optional[str] = None,
    params: Optional[str] = 'id,code,name',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.info.json',
    description=""" Get cart information """,
    tags=['bridge_configuration_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_info(
    params: Optional[str] = 'store_name,store_url,db_prefix',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.list.json',
    description=""" Get list of supported carts """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
    ],
)
def cart_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.meta_data.list.json',
    description=""" Get entity meta data """,
    tags=[
        'product_management',
        'product_attribute_management',
        'product_option_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_meta_data_list(
    entity_id: str,
    entity: Optional[str] = 'product',
    store_id: Optional[str] = None,
    key: Optional[str] = None,
    count: Optional[int] = 10,
    page_cursor: Optional[str] = None,
    params: Optional[str] = 'key,value',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.meta_data.set.json',
    description=""" Set meta data for a specific entity """,
    tags=[
        'attribute_management',
        'cart_metadata_management',
        'product_attribute_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_meta_data_set(
    entity_id: str,
    entity: Optional[str] = 'product',
    store_id: Optional[str] = None,
    key: str = ...,
    value: str = ...,
    namespace: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/cart.meta_data.unset.json',
    description=""" Unset meta data for a specific entity """,
    tags=['product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_meta_data_unset(
    entity_id: str,
    entity: Optional[str] = 'product',
    store_id: Optional[str] = None,
    key: str = ...,
    id: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.methods.json',
    description=""" Get list of cart methods """,
    tags=['account_management', 'shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_methods():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.plugin.list.json',
    description=""" Get list of installed plugins """,
    tags=['shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_plugin_list(
    store_key: Optional[str] = None,
    store_id: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cart.script.add.json',
    description=""" Add new script to the storefront """,
    tags=['shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_script_add(
    name: Optional[str] = None,
    description: Optional[str] = None,
    html: Optional[str] = None,
    src: Optional[str] = None,
    load_method: Optional[str] = None,
    scope: Optional[str] = 'storefront',
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/cart.script.delete.json',
    description=""" Remove script from the storefront """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_script_delete(id: str, store_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.script.list.json',
    description=""" Get scripts installed to the storefront """,
    tags=['product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_script_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    script_ids: Optional[str] = None,
    store_id: Optional[str] = None,
    params: Optional[str] = 'id,name,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.shipping_zones.list.json',
    description=""" Get list of shipping zones """,
    tags=['customer_account_management', 'account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_shipping_zones_list(
    store_id: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name,enabled',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cart.validate.json',
    description=""" Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts. """,
    tags=['shopping_cart_configuration'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def cart_validate(validate_version: Optional[bool] = False):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/category.add.json',
    description=""" Add new category in store """,
    tags=['category_management', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_add(
    name: str,
    parent_id: Optional[str] = None,
    stores_ids: Optional[str] = 0,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    avail: Optional[bool] = True,
    sort_order: Optional[int] = 0,
    created_time: Optional[str] = None,
    modified_time: Optional[str] = None,
    description: Optional[str] = None,
    meta_title: Optional[str] = None,
    meta_description: Optional[str] = None,
    meta_keywords: Optional[str] = None,
    seo_url: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/category.assign.json',
    description=""" Assign category to product """,
    tags=['product_management', 'category_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_assign(
    product_id: str, category_id: str = ..., store_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/category.count.json',
    description=""" Count categories in store. """,
    tags=['attribute_management', 'product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_count(
    parent_id: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    avail: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/category.delete.json',
    description=""" Delete category in store """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_delete(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/category.find.json',
    description=""" Search category in store. "Laptop" is specified here by default. """,
    tags=['customer_account_management', 'account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_find(
    find_value: str,
    find_where: Optional[str] = 'name',
    find_params: Optional[str] = 'whole_words',
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/category.image.add.json',
    description=""" Add image to category """,
    tags=['product_image_management', 'category_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_image_add(
    category_id: str,
    image_name: str = ...,
    url: str = ...,
    label: Optional[str] = None,
    mime: Optional[str] = None,
    type: Type4 = ...,
    position: Optional[int] = 0,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/category.image.delete.json',
    description=""" Delete image """,
    tags=['category_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_image_delete(
    category_id: str, image_id: str = ..., store_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/category.info.json',
    description=""" Get category info about category ID*** or specify other category ID. """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_info(
    id: str,
    params: Optional[str] = 'id,parent_id,name,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/category.list.json',
    description=""" Get list of categories from store. """,
    tags=['product_management', 'attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    page_cursor: Optional[str] = None,
    parent_id: Optional[str] = None,
    params: Optional[str] = 'id,parent_id,name,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    avail: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/category.unassign.json',
    description=""" Unassign category to product """,
    tags=['category_management', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_unassign(
    category_id: str, product_id: str = ..., store_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/category.update.json',
    description=""" Update category in store """,
    tags=['attribute_management', 'product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def category_update(
    id: str,
    name: Optional[str] = None,
    parent_id: Optional[str] = None,
    stores_ids: Optional[str] = 0,
    avail: Optional[bool] = None,
    sort_order: Optional[int] = None,
    modified_time: Optional[str] = None,
    description: Optional[str] = None,
    meta_title: Optional[str] = None,
    meta_description: Optional[str] = None,
    meta_keywords: Optional[str] = None,
    seo_url: Optional[str] = None,
    lang_id: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customer.add.json',
    description=""" Add customer into store. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_add(body: CustomerAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.attribute.list.json',
    description=""" Get attributes for specific customer """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_attribute_list(
    count: Optional[int] = 10,
    page_cursor: Optional[str] = None,
    customer_id: str = ...,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'force_all',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.count.json',
    description=""" Get number of customers from store. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_count(
    group_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    store_id: Optional[str] = None,
    customer_list_id: Optional[str] = None,
    avail: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.find.json',
    description=""" Find customers in store. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_find(
    find_value: str,
    find_where: Optional[str] = 'email',
    find_params: Optional[str] = 'whole_words',
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customer.group.add.json',
    description=""" Create customer group. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_group_add(
    name: str, store_id: Optional[str] = None, stores_ids: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.group.list.json',
    description=""" Get list of customers groups. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_group_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    group_ids: Optional[str] = None,
    params: Optional[str] = 'id,name,additional_fields',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.info.json',
    description=""" Get customers' details from store. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_info(
    id: str,
    params: Optional[str] = 'id,email,first_name,last_name',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer.list.json',
    description=""" Get list of customers from store. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    params: Optional[str] = 'id,email,first_name,last_name',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    group_id: Optional[str] = None,
    store_id: Optional[str] = None,
    customer_list_id: Optional[str] = None,
    avail: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customer.update.json',
    description=""" Update information of customer in store. """,
    tags=['customer_account_management', 'subscriber_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def customer_update(
    id: str,
    group_id: Optional[str] = None,
    group_ids: Optional[str] = None,
    first_name: Optional[str] = None,
    last_name: Optional[str] = None,
    news_letter_subscription: Optional[bool] = None,
    tags: Optional[str] = None,
    address_book_id__x_: Optional[str] = Query(None, alias='address_book_id_{x}'),
    address_book_first_name__x_: Optional[str] = Query(
        None, alias='address_book_first_name_{x}'
    ),
    address_book_last_name__x_: Optional[str] = Query(
        None, alias='address_book_last_name_{x}'
    ),
    address_book_company__x_: Optional[str] = Query(
        None, alias='address_book_company_{x}'
    ),
    address_book_phone__x_: Optional[str] = Query(None, alias='address_book_phone_{x}'),
    address_book_address1__x_: Optional[str] = Query(
        None, alias='address_book_address1_{x}'
    ),
    address_book_address2__x_: Optional[str] = Query(
        None, alias='address_book_address2_{x}'
    ),
    address_book_city__x_: Optional[str] = Query(None, alias='address_book_city_{x}'),
    address_book_country__x_: Optional[str] = Query(
        None, alias='address_book_country_{x}'
    ),
    address_book_state__x_: Optional[str] = Query(None, alias='address_book_state_{x}'),
    address_book_postcode__x_: Optional[str] = Query(
        None, alias='address_book_postcode_{x}'
    ),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.abandoned.list.json',
    description=""" Get list of orders that were left by customers before completing the order. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_abandoned_list(
    customer_id: Optional[str] = None,
    customer_email: Optional[str] = None,
    created_to: Optional[str] = None,
    created_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    skip_empty_email: Optional[bool] = False,
    store_id: Optional[str] = None,
    page_cursor: Optional[str] = None,
    count: Optional[int] = 10,
    start: Optional[int] = 0,
    params: Optional[str] = 'customer,totals,items',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/order.add.json',
    description=""" Add a new order to the cart. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_add(body: OrderAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.count.json',
    description=""" Count orders in store """,
    tags=['order_operations', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_count(
    customer_id: Optional[str] = None,
    customer_email: Optional[str] = None,
    order_status: Optional[str] = None,
    order_status_ids: Optional[OrderStatusIds] = None,
    created_to: Optional[str] = None,
    created_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    store_id: Optional[str] = None,
    ids: Optional[str] = None,
    order_ids: Optional[str] = None,
    ebay_order_status: Optional[str] = None,
    financial_status: Optional[str] = None,
    fulfillment_status: Optional[str] = None,
    shipping_method: Optional[str] = None,
    delivery_method: Optional[str] = None,
    ship_node_type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.financial_status.list.json',
    description=""" Retrieve list of financial statuses """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_financial_status_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.find.json',
    description=""" This method is deprecated and won't be supported in the future. Please use "order.list" instead. """,
    tags=['order_operations', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_find(
    customer_id: Optional[str] = None,
    customer_email: Optional[str] = None,
    order_status: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'order_id,customer,totals,address,items,bundles,status',
    exclude: Optional[str] = None,
    created_to: Optional[str] = None,
    created_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    financial_status: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.fulfillment_status.list.json',
    description=""" Retrieve list of fulfillment statuses """,
    tags=['None'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_fulfillment_status_list():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.info.json',
    description=""" Info about a specific order by ID """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_info(
    order_id: Optional[str] = None,
    id: Optional[str] = None,
    params: Optional[str] = 'order_id,customer,totals,address,items,bundles,status',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
    enable_cache: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.list.json',
    description=""" Get list of orders from store. """,
    tags=['order_operations', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_list(
    customer_id: Optional[str] = None,
    customer_email: Optional[str] = None,
    phone: Optional[str] = None,
    order_status: Optional[str] = None,
    order_status_ids: Optional[OrderStatusIds] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    page_cursor: Optional[str] = None,
    sort_by: Optional[str] = 'order_id',
    sort_direction: Optional[str] = 'asc',
    params: Optional[str] = 'order_id,customer,totals,address,items,bundles,status',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    created_to: Optional[str] = None,
    created_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    store_id: Optional[str] = None,
    ids: Optional[str] = None,
    order_ids: Optional[str] = None,
    ebay_order_status: Optional[str] = None,
    basket_id: Optional[str] = None,
    financial_status: Optional[str] = None,
    fulfillment_status: Optional[str] = None,
    shipping_method: Optional[str] = None,
    skip_order_ids: Optional[str] = None,
    since_id: Optional[int] = None,
    is_deleted: Optional[bool] = None,
    shipping_country_iso3: Optional[str] = None,
    enable_cache: Optional[bool] = False,
    delivery_method: Optional[str] = None,
    ship_node_type: Optional[str] = None,
    currency_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/order.preestimate_shipping.list.json',
    description=""" Retrieve list of order preestimated shipping methods """,
    tags=['shipping_management', 'order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_preestimate_shipping_list(body: OrderPreestimateShippingList):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/order.refund.add.json',
    description=""" Add a refund to the order. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_refund_add(body: OrderRefundAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/order.shipment.add.json',
    description=""" Add a shipment to the order. """,
    tags=['order_operations', 'shipping_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_add(body: OrderShipmentAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/order.shipment.delete.json',
    description=""" Delete order's shipment. """,
    tags=['shipping_management', 'order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_delete(
    shipment_id: str, order_id: str = ..., store_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.shipment.info.json',
    description=""" Get information of shipment. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_info(
    id: str,
    order_id: str = ...,
    start: Optional[int] = 0,
    params: Optional[str] = 'id,order_id,items,tracking_numbers',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.shipment.list.json',
    description=""" Get list of shipments by orders. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_list(
    order_id: str,
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,order_id,items,tracking_numbers',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/order.shipment.tracking.add.json',
    description=""" Add order shipment's tracking info. """,
    tags=['order_operations', 'shipping_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_tracking_add(body: OrderShipmentTrackingAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/order.shipment.update.json',
    description=""" Update order's shipment information. """,
    tags=['order_operations', 'shipping_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_shipment_update(body: OrderShipmentUpdate):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.status.list.json',
    description=""" Retrieve list of statuses """,
    tags=['shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_status_list(store_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order.transaction.list.json',
    description=""" Retrieve list of order transaction """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_transaction_list(
    count: Optional[int] = 10,
    order_ids: str = ...,
    store_id: Optional[str] = None,
    params: Optional[str] = 'id,order_id,amount,description',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    page_cursor: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/order.update.json',
    description=""" Update existing order. """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def order_update(
    order_id: str,
    store_id: Optional[str] = None,
    order_status: Optional[str] = None,
    comment: Optional[str] = None,
    admin_comment: Optional[str] = None,
    admin_private_comment: Optional[str] = None,
    date_modified: Optional[str] = None,
    date_finished: Optional[str] = None,
    financial_status: Optional[str] = None,
    fulfillment_status: Optional[str] = None,
    order_payment_method: Optional[str] = None,
    send_notifications: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.add.json',
    description=""" Add new product to store. """,
    tags=['product_management', 'attribute_management', 'product_variant_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_add(body: ProductAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.attribute.list.json',
    description=""" Get list of attributes and values. """,
    tags=['product_attribute_management', 'attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_attribute_list(
    product_id: str,
    attribute_id: Optional[str] = None,
    variant_id: Optional[str] = None,
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    attribute_group_id: Optional[str] = None,
    set_name: Optional[str] = None,
    lang_id: Optional[str] = None,
    store_id: Optional[str] = None,
    sort_by: Optional[str] = 'attribute_id',
    sort_direction: Optional[str] = 'asc',
    params: Optional[str] = 'attribute_id,name',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.attribute.value.set.json',
    description=""" Set attribute value to product. """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_attribute_value_set(
    product_id: str,
    attribute_id: Optional[str] = None,
    attribute_group_id: Optional[str] = None,
    attribute_name: Optional[str] = None,
    value: Optional[str] = None,
    value_id: Optional[int] = None,
    lang_id: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.attribute.value.unset.json',
    description=""" Removes attribute value for a product. """,
    tags=['attribute_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_attribute_value_unset(
    product_id: str,
    attribute_id: str = ...,
    store_id: Optional[str] = None,
    include_default: Optional[bool] = False,
    reindex: Optional[bool] = True,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.brand.list.json',
    description=""" Get list of brands from your store. """,
    tags=['brand_management', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_brand_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name,short_description,active,url',
    brand_ids: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.child_item.find.json',
    description=""" Search product child item (bundled item or configurable product variant) in store catalog. """,
    tags=['customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_child_item_find(
    find_value: str,
    find_where: Optional[str] = 'name',
    find_params: Optional[str] = 'whole_words',
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.child_item.info.json',
    description=""" Get child for specific product. """,
    tags=['account_management', 'product_management', 'cart_metadata_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_child_item_info(
    params: Optional[str] = 'force_all',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    product_id: str = ...,
    id: str = ...,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    currency_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.child_item.list.json',
    description=""" Get child items list of specific product(s). """,
    tags=[
        'product_management',
        'product_pricing_management',
        'currency_configuration_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_child_item_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'force_all',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    product_id: Optional[str] = None,
    product_ids: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    currency_id: Optional[str] = None,
    avail_sale: Optional[bool] = None,
    report_request_id: Optional[str] = None,
    disable_report_cache: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.count.json',
    description=""" Count products in store. """,
    tags=['product_management', 'product_attribute_management', 'brand_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_count(
    category_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    avail_view: Optional[bool] = None,
    avail_sale: Optional[bool] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    product_ids: Optional[str] = None,
    report_request_id: Optional[str] = None,
    disable_report_cache: Optional[bool] = False,
    brand_name: Optional[str] = None,
    product_attributes: Optional[ProductAttributes] = None,
    status: Optional[str] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.currency.add.json',
    description=""" Add currency and/or set default in store """,
    tags=['currency_configuration_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_currency_add(
    iso3: str,
    rate: float = ...,
    name: Optional[str] = None,
    avail: Optional[bool] = True,
    symbol_left: Optional[str] = None,
    symbol_right: Optional[str] = None,
    default: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.currency.list.json',
    description=""" Get list of currencies """,
    tags=['order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_currency_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'name,iso3,default,avail',
    page_cursor: Optional[str] = None,
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
    default: Optional[bool] = None,
    avail: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.delete.json',
    description=""" Product delete """,
    tags=['account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_delete(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.fields.json',
    description=""" Retrieve all available fields for product item in store. """,
    tags=['account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_fields():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.find.json',
    description=""" Search product in store catalog. "Apple" is specified here by default. """,
    tags=['product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_find(
    find_value: str,
    find_where: Optional[str] = 'name',
    find_params: Optional[str] = 'whole_words',
    find_what: Optional[str] = 'product',
    lang_id: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.image.add.json',
    description=""" Add image to product """,
    tags=['product_image_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_image_add(body: ProductImageAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.image.delete.json',
    description=""" Delete image """,
    tags=['basket_operations', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_image_delete(
    product_id: str, id: str = ..., store_id: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.image.update.json',
    description=""" Update details of image """,
    tags=['product_image_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_image_update(
    product_id: str,
    image_name: Optional[str] = None,
    type: Optional[str] = 'additional',
    label: Optional[str] = None,
    position: Optional[int] = None,
    id: str = ...,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    hidden: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.info.json',
    description=""" Get product info about product ID *** or specify other product ID. """,
    tags=[
        'product_management',
        'product_attribute_management',
        'product_pricing_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_info(
    id: str,
    params: Optional[str] = 'id,name,description,price,categories_ids',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    currency_id: Optional[str] = None,
    report_request_id: Optional[str] = None,
    disable_report_cache: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.list.json',
    description=""" Get list of products from your store. Returns 10 products by default. """,
    tags=[
        'product_management',
        'product_attribute_management',
        'category_management',
        'product_pricing_management',
        'brand_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_list(
    page_cursor: Optional[str] = None,
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name,description,price,categories_ids',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
    category_id: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    avail_view: Optional[bool] = None,
    avail_sale: Optional[bool] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    currency_id: Optional[str] = None,
    product_ids: Optional[str] = None,
    since_id: Optional[int] = None,
    report_request_id: Optional[str] = None,
    disable_report_cache: Optional[bool] = False,
    sort_by: Optional[str] = 'id',
    sort_direction: Optional[str] = 'asc',
    sku: Optional[str] = None,
    disable_cache: Optional[bool] = False,
    brand_name: Optional[str] = None,
    product_attributes: Optional[ProductAttributes] = None,
    status: Optional[str] = None,
    type: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.manufacturer.add.json',
    description=""" Add manufacturer to store and assign to product """,
    tags=['product_management', 'brand_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_manufacturer_add(product_id: str, manufacturer: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.option.add.json',
    description=""" Add product option from store. """,
    tags=[
        'attribute_management',
        'product_option_management',
        'product_attribute_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_add(
    name: str,
    type: Type6 = ...,
    product_id: Optional[str] = None,
    default_option_value: Optional[str] = None,
    option_values: Optional[str] = None,
    description: Optional[str] = None,
    avail: Optional[bool] = True,
    sort_order: Optional[int] = 0,
    required: Optional[bool] = False,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.option.assign.json',
    description=""" Assign option from product. """,
    tags=['product_option_management', 'attribute_management', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_assign(
    product_id: str,
    option_id: str = ...,
    required: Optional[bool] = False,
    sort_order: Optional[int] = 0,
    option_values: Optional[str] = None,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.option.list.json',
    description=""" Get list of options. """,
    tags=['product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name,description',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
    product_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.option.value.add.json',
    description=""" Add product option item from option. """,
    tags=['product_option_management', 'attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_value_add(
    product_id: str,
    option_id: str = ...,
    option_value: str = ...,
    sort_order: Optional[int] = 0,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.option.value.assign.json',
    description=""" Assign product option item from product. """,
    tags=[
        'product_option_management',
        'attribute_management',
        'product_attribute_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_value_assign(
    product_option_id: int,
    option_value_id: int = ...,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.option.value.update.json',
    description=""" Update product option item from option. """,
    tags=[
        'product_option_management',
        'product_attribute_management',
        'product_pricing_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_option_value_update(
    product_id: str,
    option_id: str = ...,
    option_value_id: int = ...,
    option_value: str = ...,
    price: Optional[float] = None,
    quantity: Optional[float] = None,
    clear_cache: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.price.add.json',
    description=""" Add some prices to the product. """,
    tags=['product_pricing_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_price_add(body: ProductPriceAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.price.delete.json',
    description=""" Delete some prices of the product """,
    tags=['product_pricing_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_price_delete(product_id: str, group_prices: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.price.update.json',
    description=""" Update some prices of the product. """,
    tags=['product_pricing_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_price_update(body: ProductPriceUpdate):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.review.list.json',
    description=""" Get reviews of a specific product. """,
    tags=['review_management', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_review_list(
    start: Optional[int] = 0,
    page_cursor: Optional[str] = None,
    count: Optional[int] = 10,
    product_id: str = ...,
    ids: Optional[str] = None,
    store_id: Optional[str] = None,
    status: Optional[str] = None,
    params: Optional[
        str
    ] = 'id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time',
    exclude: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.store.assign.json',
    description=""" Assign product to store """,
    tags=['product_management', 'order_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_store_assign(product_id: str, store_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.tax.add.json',
    description=""" Add tax class and tax rate to store and assign to product. """,
    tags=['tax_settings_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_tax_add(body: ProductTaxAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.update.json',
    description=""" Update price and quantity for a specific product """,
    tags=[
        'product_management',
        'product_pricing_management',
        'product_attribute_management',
        'category_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_update(
    id: str,
    model: Optional[str] = None,
    old_price: Optional[float] = None,
    price: Optional[float] = None,
    special_price: Optional[float] = None,
    sprice_create: Optional[str] = None,
    sprice_expire: Optional[str] = None,
    cost_price: Optional[float] = None,
    retail_price: Optional[float] = None,
    quantity: Optional[float] = None,
    weight: Optional[float] = None,
    increase_quantity: Optional[float] = None,
    reduce_quantity: Optional[float] = None,
    warehouse_id: Optional[str] = None,
    reserve_quantity: Optional[float] = None,
    manage_stock: Optional[bool] = None,
    backorder_status: Optional[str] = None,
    name: Optional[str] = None,
    sku: Optional[str] = None,
    visible: Optional[str] = None,
    manufacturer: Optional[str] = None,
    manufacturer_id: Optional[str] = None,
    categories_ids: Optional[str] = None,
    description: Optional[str] = None,
    short_description: Optional[str] = None,
    meta_title: Optional[str] = None,
    meta_keywords: Optional[str] = None,
    meta_description: Optional[str] = None,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    in_stock: Optional[bool] = None,
    status: Optional[str] = None,
    seo_url: Optional[str] = None,
    report_request_id: Optional[str] = None,
    disable_report_cache: Optional[bool] = False,
    reindex: Optional[bool] = True,
    tags: Optional[str] = None,
    clear_cache: Optional[bool] = True,
    gtin: Optional[str] = None,
    taxable: Optional[bool] = True,
    product_class: Optional[str] = None,
    height: Optional[float] = None,
    length: Optional[float] = None,
    width: Optional[float] = None,
    harmonized_system_code: Optional[str] = None,
    country_of_origin: Optional[str] = None,
    search_keywords: Optional[str] = None,
    barcode: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.variant.add.json',
    description=""" Add variant to product. """,
    tags=['product_variant_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_add(body: ProductVariantAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.variant.count.json',
    description=""" Get count variants. """,
    tags=['order_operations', 'product_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_count(
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    category_id: Optional[str] = None,
    product_id: str = ...,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.variant.delete.json',
    description=""" Delete variant. """,
    tags=['account_management', 'basket_operations', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_delete(id: str, product_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.variant.image.add.json',
    description=""" Add image to product """,
    tags=['product_image_management', 'product_variant_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_image_add(body: ProductVariantImageAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.variant.image.delete.json',
    description=""" Delete  image to product """,
    tags=['product_variant_management', 'product_pricing_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_image_delete(
    product_id: str,
    product_variant_id: int = ...,
    id: str = ...,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.variant.info.json',
    description=""" Get variant info. """,
    tags=['product_management', 'product_attribute_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_info(
    params: Optional[str] = 'id,name,description,price',
    exclude: Optional[str] = None,
    id: str = ...,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/product.variant.list.json',
    description=""" Get list variants. """,
    tags=['product_management', 'category_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    params: Optional[str] = 'id,name,description,price',
    exclude: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    category_id: Optional[str] = None,
    product_id: Optional[str] = None,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/product.variant.price.add.json',
    description=""" Add some prices to the product variant. """,
    tags=['product_pricing_management', 'product_variant_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_price_add(body: ProductVariantPriceAdd):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/product.variant.price.delete.json',
    description=""" Delete some prices of the product variant. """,
    tags=[
        'basket_operations',
        'shopping_cart_coupon_management',
        'shopping_cart_operations',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_price_delete(id: str, group_prices: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.variant.price.update.json',
    description=""" Update some prices of the product variant. """,
    tags=['product_pricing_management', 'product_variant_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_price_update(body: ProductVariantPriceUpdate):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/product.variant.update.json',
    description=""" Update variant. """,
    tags=[
        'product_management',
        'product_pricing_management',
        'product_option_management',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def product_variant_update(
    store_id: Optional[str] = None,
    id: str = ...,
    product_id: str = ...,
    warehouse_id: Optional[str] = None,
    reserve_quantity: Optional[float] = None,
    quantity: Optional[float] = None,
    increase_quantity: Optional[float] = 0,
    reduce_quantity: Optional[float] = 0,
    price: Optional[float] = None,
    special_price: Optional[float] = None,
    retail_price: Optional[float] = None,
    old_price: Optional[float] = None,
    cost_price: Optional[float] = None,
    sprice_create: Optional[str] = None,
    sprice_expire: Optional[str] = None,
    manage_stock: Optional[bool] = None,
    in_stock: Optional[bool] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    sku: Optional[str] = None,
    meta_title: Optional[str] = None,
    meta_description: Optional[str] = None,
    meta_keywords: Optional[str] = None,
    short_description: Optional[str] = None,
    visible: Optional[str] = None,
    status: Optional[str] = None,
    backorder_status: Optional[str] = None,
    weight: Optional[float] = 0,
    barcode: Optional[str] = None,
    reindex: Optional[bool] = True,
    taxable: Optional[bool] = True,
    options: Optional[Options] = None,
    harmonized_system_code: Optional[str] = None,
    country_of_origin: Optional[str] = None,
    width: Optional[float] = None,
    height: Optional[float] = None,
    length: Optional[float] = None,
    gtin: Optional[str] = None,
    clear_cache: Optional[bool] = True,
    lang_id: Optional[str] = None,
    model: Optional[str] = None,
    available_for_sale: Optional[bool] = True,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/subscriber.list.json',
    description=""" Get subscribers list """,
    tags=['subscriber_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def subscriber_list(
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    subscribed: Optional[bool] = None,
    store_id: Optional[str] = None,
    email: Optional[str] = None,
    params: Optional[str] = 'force_all',
    exclude: Optional[str] = None,
    created_from: Optional[str] = None,
    created_to: Optional[str] = None,
    modified_from: Optional[str] = None,
    modified_to: Optional[str] = None,
    page_cursor: Optional[str] = None,
    response_fields: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tax.class.info.json',
    description=""" Get info about tax """,
    tags=['tax_settings_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def tax_class_info(
    tax_class_id: str,
    store_id: Optional[str] = None,
    lang_id: Optional[str] = None,
    params: Optional[str] = 'tax_class_id,name,avail',
    response_fields: Optional[str] = None,
    exclude: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhook.count.json',
    description=""" Count registered webhooks on the store. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_count(
    entity: Optional[str] = None,
    action: Optional[str] = None,
    active: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/webhook.create.json',
    description=""" Create webhook on the store and subscribe to it. """,
    tags=[
        'account_management',
        'customer_account_management',
        'shopping_cart_configuration',
        'shopping_cart_operations',
    ],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_create(
    entity: str,
    action: str = ...,
    callback: Optional[str] = None,
    label: Optional[str] = None,
    fields: Optional[str] = 'force_all',
    active: Optional[bool] = True,
    store_id: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/webhook.delete.json',
    description=""" Delete registered webhook on the store. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_delete(id: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhook.events.json',
    description=""" List all Webhooks that are available on this store. """,
    tags=['account_management', 'shopping_cart_operations'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_events():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/webhook.list.json',
    description=""" List registered webhook on the store. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_list(
    params: Optional[str] = 'id,entity,action,callback',
    start: Optional[int] = 0,
    count: Optional[int] = 10,
    entity: Optional[str] = None,
    action: Optional[str] = None,
    active: Optional[bool] = None,
    ids: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/webhook.update.json',
    description=""" Update Webhooks parameters. """,
    tags=['account_management', 'customer_account_management'],
    security=[
        APIKeyHeader(name="x-api-key"),
        APIKeyHeader(name="x-store-key"),
    ],
)
def webhook_update(
    id: str,
    callback: Optional[str] = None,
    label: Optional[str] = None,
    fields: Optional[str] = None,
    active: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
