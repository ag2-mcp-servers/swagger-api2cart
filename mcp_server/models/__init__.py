# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:38:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class A2CDateTime(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    format: Optional[str] = None
    value: Optional[str] = None


class AmazonSpAwsRegion(Enum):
    eu_west_1 = 'eu-west-1'
    us_east_1 = 'us-east-1'
    us_west_2 = 'us-west-2'


class CartId(Enum):
    field_3DCart = '3DCart'
    field_3DCartApi = '3DCartApi'
    AceShop = 'AceShop'
    AmazonSP = 'AmazonSP'
    Amazon = 'Amazon'
    AspDotNetStorefront = 'AspDotNetStorefront'
    BigcommerceApi = 'BigcommerceApi'
    Creloaded = 'Creloaded'
    CommerceHQ = 'CommerceHQ'
    Cscart = 'Cscart'
    Cubecart = 'Cubecart'
    Demandware = 'Demandware'
    EBay = 'EBay'
    Ecwid = 'Ecwid'
    Etsy = 'Etsy'
    EtsyAPIv3 = 'EtsyAPIv3'
    Gambio = 'Gambio'
    Interspire = 'Interspire'
    JooCart = 'JooCart'
    Magento1212 = 'Magento1212'
    Magento2Api = 'Magento2Api'
    MijoShop = 'MijoShop'
    Neto = 'Neto'
    Opencart14 = 'Opencart14'
    LightSpeed = 'LightSpeed'
    Oscmax2 = 'Oscmax2'
    Oscommerce22ms2 = 'Oscommerce22ms2'
    Oxid = 'Oxid'
    Pinnacle = 'Pinnacle'
    Prestashop = 'Prestashop'
    PrestashopApi = 'PrestashopApi'
    SSPremium = 'SSPremium'
    Shopify = 'Shopify'
    Squarespace = 'Squarespace'
    Shopware = 'Shopware'
    ShopwareApi = 'ShopwareApi'
    Tomatocart = 'Tomatocart'
    Ubercart = 'Ubercart'
    Virtuemart = 'Virtuemart'
    Volusion = 'Volusion'
    WPecommerce = 'WPecommerce'
    Walmart = 'Walmart'
    WebAsyst = 'WebAsyst'
    Woocommerce = 'Woocommerce'
    WoocommerceApi = 'WoocommerceApi'
    Wix = 'Wix'
    Xcart = 'Xcart'
    Xtcommerce = 'Xtcommerce'
    XtcommerceVeyton = 'XtcommerceVeyton'
    Zencart137 = 'Zencart137'
    Hybris = 'Hybris'
    MercadoLibre = 'MercadoLibre'
    Zid = 'Zid'


class HybrisWebsite(BaseModel):
    storeIds: List[str] = Field(..., min_length=1)
    uid: str
    url: str


class AccountCartAdd(BaseModel):
    field_3dcart_access_token: Optional[str] = Field(
        None, alias='3dcart_access_token', description='3DCart Token'
    )
    field_3dcart_private_key: Optional[str] = Field(
        None, alias='3dcart_private_key', description='3DCart Private Key'
    )
    field_3dcartapi_api_key: Optional[str] = Field(
        None, alias='3dcartapi_api_key', description='3DCart API Key'
    )
    amazon_access_key_id: Optional[str] = Field(
        None, description='Amazon Secret Key Id'
    )
    amazon_access_token: Optional[str] = Field(
        None,
        description='MWS Auth Token. Access token authorizing the app to access resources on behalf of a user',
    )
    amazon_marketplaces_ids: Optional[str] = Field(
        None, description='Amazon Marketplace IDs comma separated string'
    )
    amazon_secret_key: Optional[str] = Field(None, description='Amazon Secret Key')
    amazon_seller_id: Optional[str] = Field(
        None, description='Amazon Seller ID (Merchant token)'
    )
    amazon_sp_api_environment: Optional[str] = Field(
        'production', description='Amazon SP API environment'
    )
    amazon_sp_aws_region: AmazonSpAwsRegion = Field(
        ..., description='Amazon AWS Region'
    )
    amazon_sp_aws_role_arn: str = Field(..., description='Amazon AWS Role ARN')
    amazon_sp_aws_user_key_id: str = Field(
        ..., description='Amazon AWS user access key ID'
    )
    amazon_sp_aws_user_secret: str = Field(
        ..., description='Amazon AWS user secret access key'
    )
    amazon_sp_client_id: str = Field(..., description='Amazon SP API app client id')
    amazon_sp_client_secret: str = Field(
        ..., description='Amazon SP API app client secret'
    )
    amazon_sp_refresh_token: str = Field(
        ..., description='Amazon SP API OAuth refresh token'
    )
    aspdotnetstorefront_api_pass: Optional[str] = Field(
        None, description='AspDotNetStorefront API Password'
    )
    aspdotnetstorefront_api_user: Optional[str] = Field(
        None,
        description="It's a AspDotNetStorefront account for which API is available",
    )
    bigcommerceapi_access_token: Optional[str] = Field(
        None,
        description='Access token authorizing the app to access resources on behalf of a user',
    )
    bigcommerceapi_admin_account: Optional[str] = Field(
        None, description="It's a BigCommerce account for which API is enabled"
    )
    bigcommerceapi_api_key: Optional[str] = Field(
        None, description='Bigcommerce API Key'
    )
    bigcommerceapi_api_path: Optional[str] = Field(
        None, description='BigCommerce API URL'
    )
    bigcommerceapi_client_id: Optional[str] = Field(
        None, description='Client ID of the requesting app'
    )
    bigcommerceapi_context: Optional[str] = Field(
        None, description='API Path section unique to the store'
    )
    bridge_url: Optional[str] = Field(
        None,
        description='This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)',
    )
    cart_id: CartId = Field(
        ..., description='Storeâ€™s identifier which you can get from cart_list method'
    )
    commercehq_api_key: Optional[str] = Field(None, description='CommerceHQ api key')
    commercehq_api_password: Optional[str] = Field(
        None, description='CommerceHQ api password'
    )
    db_tables_prefix: Optional[str] = Field(None, description='DB tables prefix')
    demandware_api_password: Optional[str] = Field(
        None, description='Demandware api password'
    )
    demandware_client_id: Optional[str] = Field(
        None, description='Demandware client id'
    )
    demandware_user_name: Optional[str] = Field(
        None, description='Demandware user name'
    )
    demandware_user_password: Optional[str] = Field(
        None, description='Demandware user password'
    )
    ebay_access_token: Optional[str] = Field(
        None, description='Used to authenticate API requests.'
    )
    ebay_client_id: Optional[str] = Field(None, description='Application ID (AppID).')
    ebay_client_secret: Optional[str] = Field(
        None, description='Shared Secret from eBay application'
    )
    ebay_environment: Optional[str] = Field(
        'production', description='eBay environment'
    )
    ebay_refresh_token: Optional[str] = Field(
        None, description='Used to renew the access token.'
    )
    ebay_runame: Optional[str] = Field(
        None, description='The RuName value that eBay assigns to your application.'
    )
    ebay_site_id: Optional[int] = Field(0, description='eBay global ID')
    ecwid_acess_token: Optional[str] = Field(
        None,
        description='Access token authorizing the app to access resources on behalf of a user',
    )
    ecwid_store_id: Optional[str] = Field(None, description='Store Id')
    etsy_access_token: Optional[str] = Field(
        None,
        description='Access token authorizing the app to access resources on behalf of a user',
    )
    etsy_client_id: str = Field(..., description='Etsy Client Id')
    etsy_keystring: Optional[str] = Field(None, description='Etsy keystring')
    etsy_refresh_token: str = Field(..., description='Etsy Refresh token')
    etsy_shared_secret: Optional[str] = Field(None, description='Etsy shared secret')
    etsy_token_secret: Optional[str] = Field(
        None,
        description='Secret token authorizing the app to access resources on behalf of a user',
    )
    ftp_host: Optional[str] = Field(None, description='FTP connection host')
    ftp_password: Optional[str] = Field(None, description='FTP Password')
    ftp_port: Optional[int] = Field(None, description='FTP Port')
    ftp_store_dir: Optional[str] = Field(None, description='FTP Store dir')
    ftp_user: Optional[str] = Field(None, description='FTP User')
    hybris_client_id: Optional[str] = Field(
        None, description='Omni Commerce Connector Client ID'
    )
    hybris_client_secret: Optional[str] = Field(
        None, description='Omni Commerce Connector Client Secret'
    )
    hybris_password: Optional[str] = Field(None, description='User password')
    hybris_username: Optional[str] = Field(None, description='User Name')
    hybris_websites: Optional[List[HybrisWebsite]] = Field(
        None, description='Websites to stores mapping data', min_length=1
    )
    lightspeed_api_key: Optional[str] = Field(None, description='LightSpeed api key')
    lightspeed_api_secret: Optional[str] = Field(
        None, description='LightSpeed api secret'
    )
    magento_access_token: Optional[str] = Field(
        None, description='Magento Access Token'
    )
    magento_consumer_key: Optional[str] = Field(
        None, description='Magento Consumer Key'
    )
    magento_consumer_secret: Optional[str] = Field(
        None, description='Magento Consumer Secret'
    )
    magento_token_secret: Optional[str] = Field(
        None, description='Magento Token Secret'
    )
    mercado_libre_app_id: Optional[str] = Field(
        None, description='Mercado Libre App ID'
    )
    mercado_libre_app_secret_key: Optional[str] = Field(
        None, description='Mercado Libre App Secret Key'
    )
    mercado_libre_refresh_token: Optional[str] = Field(
        None, description='Mercado Libre Refresh Token'
    )
    neto_api_key: Optional[str] = Field(None, description='Neto API Key')
    neto_api_username: Optional[str] = Field(None, description='Neto User Name')
    prestashop_webservice_key: Optional[str] = Field(
        None, description='Prestashop webservice key'
    )
    shopify_access_token: Optional[str] = Field(
        None,
        description='Access token authorizing the app to access resources on behalf of a user',
    )
    shopify_api_key: Optional[str] = Field(None, description='Shopify API Key')
    shopify_api_password: Optional[str] = Field(
        None, description='Shopify API Password'
    )
    shopify_shared_secret: Optional[str] = Field(None, description='Shared secret')
    shopware_access_key: Optional[str] = Field(None, description='Shopware access key')
    shopware_api_key: Optional[str] = Field(None, description='Shopware api key')
    shopware_api_secret: Optional[str] = Field(
        None, description='Shopware client secret access key'
    )
    squarespace_api_key: Optional[str] = Field(None, description='Squarespace API Key')
    store_key: Optional[str] = Field(
        None, description='Set this parameter if bridge is already uploaded to store'
    )
    store_root: Optional[str] = Field(
        None,
        description='Absolute path to the store root directory (used with "bridge_url" parameter)',
    )
    store_url: str = Field(
        ...,
        description='A web address of a store that you would like to connect to API2Cart',
    )
    validate_version: Optional[bool] = Field(
        False, description='Specify if api2cart should validate cart version'
    )
    verify: Optional[bool] = Field(
        True, description="Enables or disables cart's verification"
    )
    volusion_login: Optional[str] = Field(
        None, description="It's a Volusion account for which API is enabled"
    )
    volusion_password: Optional[str] = Field(None, description='Volusion API Password')
    walmart_channel_type: Optional[str] = Field(
        None, description='Walmart WM_CONSUMER.CHANNEL.TYPE header'
    )
    walmart_client_id: Optional[str] = Field(None, description='Walmart client ID')
    walmart_client_secret: Optional[str] = Field(
        None, description='Walmart client secret'
    )
    walmart_environment: Optional[str] = Field(
        'production', description='Walmart environment'
    )
    wc_consumer_key: Optional[str] = Field(None, description='Woocommerce consumer key')
    wc_consumer_secret: Optional[str] = Field(
        None, description='Woocommerce consumer secret'
    )
    wix_app_id: Optional[str] = Field(None, description='Wix App ID')
    wix_app_secret_key: Optional[str] = Field(None, description='Wix App Secret Key')
    wix_refresh_token: Optional[str] = Field(None, description='Wix refresh token')
    zid_access_token: Optional[str] = Field(None, description='Zid Access Token')
    zid_authorization: Optional[str] = Field(None, description='Zid Authorization')
    zid_client_id: Optional[int] = Field(None, description='Zid Client ID')
    zid_client_secret: Optional[str] = Field(None, description='Zid Client Secret')
    zid_refresh_token: Optional[str] = Field(None, description='Zid refresh token')


class BaseCustomer(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    email: Optional[str] = None
    first_name: Optional[str] = None
    id: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None


class BasketItemOption(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    used_in_combination: Optional[bool] = None
    value: Optional[str] = None
    value_id: Optional[str] = None


class BasketLiveShippingService(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    callback: Optional[str] = None
    callback_err_cnt: Optional[int] = None
    custom_fields: Optional[Dict[str, Any]] = None
    enabled_on_store: Optional[bool] = None
    id: Optional[str] = None
    name: Optional[str] = None


class CartConfigUpdate(BaseModel):
    custom_fields: Optional[Dict[str, Any]] = Field(
        None, description='This parameter sets the list of params to the shopping cart.'
    )
    db_tables_prefix: Optional[str] = Field(
        None,
        description='This parameter is deprecated for this method. Please, use this parameter in method account.config.update',
    )
    store_id: Optional[str] = Field(None, description='Store Id')


class ActionApplyTo(Enum):
    order_total = 'order_total'
    item_price = 'item_price'
    shipping = 'shipping'


class ActionScope(Enum):
    order = 'order'
    matching_items = 'matching_items'


class ActionType(Enum):
    percent = 'percent'
    fixed = 'fixed'


class CartCouponAdd(BaseModel):
    action_amount: float = Field(..., description='Defines the discount amount value.')
    action_apply_to: ActionApplyTo = Field(
        ..., description='Defines where discount should be applied'
    )
    action_condition_entity: Optional[str] = Field(
        None, description='Defines entity for action condition.'
    )
    action_condition_key: Optional[str] = Field(
        None, description='Defines entity attribute code for action condition.'
    )
    action_condition_operator: Optional[str] = Field(
        None, description='Defines condition operator.'
    )
    action_condition_value: Optional[str] = Field(
        None,
        description='Defines condition attribute value/s. Can be comma separated string.',
    )
    action_scope: ActionScope = Field(
        ...,
        description='Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.',
    )
    action_type: ActionType = Field(..., description='Coupon discount type')
    code: str = Field(..., description='Coupon code')
    codes: Optional[List[str]] = Field(None, description='Entity codes')
    date_end: Optional[str] = Field(
        None, description='Defines when discount code will be expired.'
    )
    date_start: Optional[str] = Field(
        'now', description='Defines when discount code will be available.'
    )
    name: Optional[str] = Field(None, description='Coupon name')
    store_id: Optional[str] = Field(None, description='Store Id')
    usage_limit: Optional[int] = Field(None, description='Usage limit for coupon.')
    usage_limit_per_customer: Optional[int] = Field(
        None, description='Usage limit per customer.'
    )


class CartChannel(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    is_enabled: Optional[bool] = None
    name: Optional[str] = None
    platform: Optional[str] = None


class CartMetaData(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    key: Optional[str] = None
    namespace: Optional[str] = None
    value: Optional[str] = None


class CartShippingZone(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    country: Optional[str] = None
    country_iso2_codes: Optional[List[str]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None


class Country(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code2: Optional[str] = None
    code3: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None


class CouponCode(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    used_times: Optional[int] = None


class CouponCondition(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    entity: Optional[str] = None
    id: Optional[str] = None
    key: Optional[str] = None
    logic_operator: Optional[str] = None
    match_items: Optional[str] = None
    operator: Optional[str] = None
    sub_conditions: Optional[List[CouponCondition]] = Field(
        None, alias='sub-conditions'
    )
    value: Optional[str] = None


class CouponHistory(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[float] = None
    custom_fields: Optional[Dict[str, Any]] = None
    order_id: Optional[str] = None


class Currency(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default: Optional[bool] = None
    id: Optional[str] = None
    iso3: Optional[str] = None
    name: Optional[str] = None
    rate: Optional[float] = None
    symbol_left: Optional[str] = None
    symbol_right: Optional[str] = None


class Addres(BaseModel):
    address_book_address1: Optional[str] = Field(
        None, description="Specifies customer's first address in the address book"
    )
    address_book_address2: Optional[str] = Field(
        None, description="Specifies customer's second address in the address book"
    )
    address_book_city: Optional[str] = Field(
        None, description="Specifies customer's city in the address book"
    )
    address_book_company: Optional[str] = Field(
        None, description="Specifies customer's company name in the address book"
    )
    address_book_country: Optional[str] = Field(
        None, description='ISO code or name of country'
    )
    address_book_default: Optional[bool] = Field(
        None, description='Defines whether the address is used by default'
    )
    address_book_fax: Optional[str] = Field(
        None, description="Specifies customer's fax in the address book"
    )
    address_book_first_name: Optional[str] = Field(
        None, description="Specifies customer's first name in the address book"
    )
    address_book_gender: Optional[str] = Field(
        None, description="Specifies customer's gender"
    )
    address_book_last_name: Optional[str] = Field(
        None, description="Specifies customer's last name in the address book"
    )
    address_book_phone: Optional[str] = Field(
        None, description="Specifies customer's phone number in the address book"
    )
    address_book_postcode: Optional[str] = Field(
        None, description="Specifies customer's postcode"
    )
    address_book_region: Optional[str] = Field(
        None, description="Specifies customer's region"
    )
    address_book_state: Optional[str] = Field(
        None, description='ISO code or name of state.'
    )
    address_book_type: Optional[str] = Field(
        None, description="Specifies customer's address type"
    )
    address_book_website: Optional[str] = Field(
        None, description="Specifies customer's website in the address book"
    )


class CustomerAdd(BaseModel):
    address: Optional[List[Addres]] = None
    birth_day: Optional[str] = Field(None, description="Defines customer's birthday")
    company: Optional[str] = Field(None, description="Defines customer's company")
    created_time: Optional[str] = Field(None, description="Entity's date creation")
    email: str = Field(..., description="Defines customer's email")
    fax: Optional[str] = Field(None, description="Defines customer's fax")
    first_name: str = Field(..., description="Defines customer's first name")
    gender: Optional[str] = Field(None, description="Defines customer's gender")
    group: Optional[str] = Field(
        None, description='Defines the group where the customer'
    )
    last_login: Optional[str] = Field(
        None, description="Defines customer's last login time"
    )
    last_name: str = Field(..., description="Defines customer's last name")
    login: Optional[str] = Field(None, description="Specifies customer's login name")
    modified_time: Optional[str] = Field(None, description="Entity's date modification")
    news_letter_subscription: Optional[bool] = Field(
        False,
        description='Defines whether the newsletter subscription is available for the user',
    )
    password: Optional[str] = Field(
        None, description="Defines customer's unique password"
    )
    phone: Optional[str] = Field(None, description="Defines customer's phone number")
    status: Optional[str] = Field('enabled', description="Defines customer's status")
    store_id: Optional[str] = Field(None, description='Store Id')
    website: Optional[str] = Field(None, description='Link to customer website')


class CustomerAttributeValue(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    value: Optional[str] = None


class CustomerGroup(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None


class GiftCard(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[float] = None
    avail_to: Optional[str] = None
    code: Optional[str] = None
    created_at: Optional[str] = None
    currency_code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    free_product_ids: Optional[str] = None
    id: Optional[str] = None
    initial_amount: Optional[float] = None
    issuer_email: Optional[str] = None
    issuer_name: Optional[str] = None
    message: Optional[str] = None
    name: Optional[str] = None
    recipient_email: Optional[str] = None
    recipient_name: Optional[str] = None
    status: Optional[str] = None
    type: Optional[str] = None
    usage_history: Optional[List[CouponHistory]] = None


class Image(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    alt: Optional[str] = None
    avail: Optional[bool] = None
    create_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    file_name: Optional[str] = None
    http_path: Optional[str] = None
    id: Optional[str] = None
    mime_type: Optional[str] = Field(None, alias='mime-type')
    modified_at: Optional[A2CDateTime] = None
    size: Optional[int] = None
    sort_order: Optional[int] = None
    type: Optional[str] = None


class Info(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    city: Optional[str] = None
    country: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    email: Optional[str] = None
    owner: Optional[str] = None
    phone: Optional[str] = None
    state: Optional[str] = None
    state_code: Optional[str] = None
    street_address: Optional[str] = None
    street_address_line_2: Optional[str] = None
    zip_code: Optional[str] = None


class Language(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    iso_code: Optional[str] = None
    name: Optional[str] = None


class NoteAttribute(BaseModel):
    name: Optional[str] = None
    value: Optional[str] = None


class OrderItemOptionItem(BaseModel):
    order_item_option_name: Optional[str] = Field(
        None,
        description='Ordered Product Option Name. Where x is order item ID, y is order item option ID',
    )
    order_item_option_price: Optional[float] = Field(
        None,
        description='Ordered product option price Where x is order item ID, y - order item option ID',
    )
    order_item_option_value: Optional[str] = Field(
        None,
        description='Ordered product option value Where x is order item ID, y - order item option ID',
    )


class OrderItemPropertyItem(BaseModel):
    order_item_property_name: Optional[str] = Field(
        None,
        description='Ordered product property name. Where x is order item ID, y is order item property ID',
    )
    order_item_property_value: Optional[str] = Field(
        None,
        description='Ordered product property value. Where x is order item ID, y - order item property ID',
    )


class OrderItemItem(BaseModel):
    order_item_allow_refund_items_separately: Optional[bool] = Field(
        None,
        description='Indicates whether subitems of the grouped/bundle product can be refunded separately',
    )
    order_item_allow_ship_items_separately: Optional[bool] = Field(
        None,
        description='Indicates whether subitems of the grouped/bundle product can be shipped separately',
    )
    order_item_id: str = Field(
        ..., description='Defines orders specified by order item id'
    )
    order_item_model: Optional[str] = Field(
        None, description='Defines orders specified by order item model'
    )
    order_item_name: str = Field(
        ..., description='Defines orders specified by order item name'
    )
    order_item_option: Optional[List[OrderItemOptionItem]] = None
    order_item_parent: Optional[int] = Field(
        None, description='Index of the parent grouped/bundle product'
    )
    order_item_parent_option_name: Optional[str] = Field(
        None, description='Option name of the parent grouped/bundle product'
    )
    order_item_price: float = Field(
        ..., description='Defines orders specified by order item price'
    )
    order_item_price_includes_tax: Optional[bool] = Field(
        False, description='Defines if item price includes tax'
    )
    order_item_property: Optional[List[OrderItemPropertyItem]] = None
    order_item_quantity: int = Field(
        ..., description='Defines orders specified by order item quantity'
    )
    order_item_tax: Optional[float] = Field(
        0, description='Percentage of tax for product order'
    )
    order_item_variant_id: Optional[str] = Field(
        None, description='Ordered product variant. Where x is order item ID'
    )
    order_item_weight: Optional[float] = Field(
        None, description='Defines orders specified by order item weight'
    )


class OrderAdd(BaseModel):
    admin_comment: Optional[str] = Field(
        None, description="Specifies admin's order comment"
    )
    admin_private_comment: Optional[str] = Field(
        None, description="Specifies private admin's order comment"
    )
    bill_address_1: str = Field(..., description='Specifies first billing address')
    bill_address_2: Optional[str] = Field(
        None, description='Specifies second billing address'
    )
    bill_city: str = Field(..., description='Specifies billing city')
    bill_company: Optional[str] = Field(None, description='Specifies billing company')
    bill_country: str = Field(..., description='Specifies billing country code')
    bill_fax: Optional[str] = Field(None, description='Specifies billing fax')
    bill_first_name: str = Field(..., description='Specifies billing first name')
    bill_last_name: str = Field(..., description='Specifies billing last name')
    bill_phone: Optional[str] = Field(None, description='Specifies billing phone')
    bill_postcode: str = Field(..., description='Specifies billing postcode')
    bill_state: str = Field(..., description='Specifies billing state code')
    channel_id: Optional[str] = Field(None, description='Channel ID')
    clear_cache: Optional[bool] = Field(True, description='Is cache clear required')
    comment: Optional[str] = Field(None, description='Specifies order comment')
    coupon_discount: Optional[float] = Field(
        None, description="Specifies order's coupon discount"
    )
    coupons: Optional[List[str]] = Field(
        None, description='Coupons that will be applied to order', min_length=1
    )
    create_invoice: Optional[bool] = Field(
        False,
        description='Defines whether the invoice is created automatically along with the order',
    )
    currency: Optional[str] = Field(None, description='Currency code of order')
    customer_birthday: Optional[str] = Field(
        None, description='Specifies customerâ€™s birthday'
    )
    customer_email: str = Field(
        ...,
        description='Defines the customer specified by email for whom order has to be created',
    )
    customer_fax: Optional[str] = Field(None, description='Specifies customerâ€™s fax')
    customer_first_name: Optional[str] = Field(
        None, description="Specifies customer's first name"
    )
    customer_last_name: Optional[str] = Field(
        None, description='Specifies customerâ€™s last name'
    )
    customer_phone: Optional[str] = Field(
        None, description='Specifies customerâ€™s phone'
    )
    date: Optional[str] = Field(
        None, description='Specifies an order creation date in format Y-m-d H:i:s'
    )
    date_finished: Optional[str] = Field(
        None, description="Specifies order's  finished date"
    )
    date_modified: Optional[str] = Field(
        None, description="Specifies order's  modification date"
    )
    discount: Optional[float] = Field(None, description="Specifies order's discount")
    external_source: Optional[str] = Field(
        None, description='Identifying the system used to generate the order'
    )
    financial_status: Optional[str] = Field(
        None, description='Create order with financial status'
    )
    fulfillment_status: Optional[str] = Field(
        None, description='Create order with fulfillment status'
    )
    gift_certificate_discount: Optional[float] = Field(
        None, description='Discounts for order with gift certificates'
    )
    id: Optional[str] = Field(None, description="Defines order's id")
    inventory_behaviour: Optional[str] = Field(
        'bypass',
        description='The behaviour to use when updating inventory.<hr><div style="font-style:normal">Values description:<div style="margin-left: 2%; padding-top: 2%"><div style="font-size:85%"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product\'s </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product\'s </br> inventory policy.</br></br></div></div></div>',
    )
    note_attributes: Optional[List[NoteAttribute]] = Field(
        None, description='Defines note attributes'
    )
    order_id: Optional[str] = Field(
        None, description='Defines the order id if it is supported by the cart'
    )
    order_item: List[OrderItemItem]
    order_payment_method: Optional[str] = Field(
        None,
        description="Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'",
    )
    order_shipping_method: Optional[str] = Field(
        None, description='Defines order shipping method'
    )
    order_status: str = Field(..., description='Defines order status.')
    prices_inc_tax: Optional[bool] = Field(
        False, description='Indicates whether prices and subtotal includes tax.'
    )
    send_admin_notifications: Optional[bool] = Field(
        False, description='Notify admin when new order was created.'
    )
    send_notifications: Optional[bool] = Field(
        False, description='Send notifications to customer after order was created'
    )
    shipp_address_1: Optional[str] = Field(
        None, description='Specifies first shipping address'
    )
    shipp_address_2: Optional[str] = Field(
        None, description='Specifies second address line of a shipping street address'
    )
    shipp_city: Optional[str] = Field(None, description='Specifies shipping city')
    shipp_company: Optional[str] = Field(None, description='Specifies shipping company')
    shipp_country: Optional[str] = Field(
        None, description='Specifies shipping country code'
    )
    shipp_fax: Optional[str] = Field(None, description='Specifies shipping fax')
    shipp_first_name: Optional[str] = Field(
        None, description='Specifies shipping first name'
    )
    shipp_last_name: Optional[str] = Field(
        None, description='Specifies shipping last name'
    )
    shipp_phone: Optional[str] = Field(None, description='Specifies shipping phone')
    shipp_postcode: Optional[str] = Field(
        None, description='Specifies shipping postcode'
    )
    shipp_state: Optional[str] = Field(
        None, description='Specifies shipping state code'
    )
    shipping_price: Optional[float] = Field(
        0, description="Specifies order's shipping price"
    )
    shipping_tax: Optional[float] = Field(
        None, description="Specifies order's shipping price tax"
    )
    store_id: Optional[str] = Field(
        None, description='Defines store id where the order should be assigned'
    )
    subtotal_price: Optional[float] = Field(
        None,
        description='Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts',
    )
    tags: Optional[str] = Field(None, description='Order tags')
    tax_price: Optional[float] = Field(0, description='The value of tax cost for order')
    total_paid: Optional[float] = Field(
        None, description='Defines total paid amount for the order'
    )
    total_price: Optional[float] = Field(
        None, description="Defines order's total price"
    )
    total_weight: Optional[int] = Field(
        None,
        description='Defines the sum of all line item weights in grams for the order',
    )
    transaction_id: Optional[str] = Field(None, description='Payment transaction id')


class OrderItemOptionItem1(BaseModel):
    order_item_option_id: Optional[str] = Field(
        None,
        description='Product Option ID. Where x is order item ID, y is order item option ID',
    )
    order_item_option_name: Optional[str] = Field(
        None,
        description='Ordered Product Option Name. Where x is order item ID, y is order item option ID',
    )
    order_item_option_used_in_combinations: Optional[bool] = Field(
        None,
        description='Product option used in combinations flag, where x is order item ID, y - order item option ID',
    )
    order_item_option_value: Optional[str] = Field(
        None,
        description='Ordered product option value Where x is order item ID, y - order item option ID',
    )
    order_item_option_value_id: Optional[str] = Field(
        None,
        description='Product option value ID, where x is order item ID, y - order item option ID',
    )


class OrderItemItem1(BaseModel):
    order_item_id: str = Field(
        ..., description='Defines orders specified by order item id'
    )
    order_item_model: Optional[str] = Field(
        None, description='Defines orders specified by order item model'
    )
    order_item_option: Optional[List[OrderItemOptionItem1]] = None
    order_item_quantity: int = Field(
        ..., description='Defines orders specified by order item quantity'
    )
    order_item_variant_id: Optional[str] = Field(
        None, description='Ordered product variant. Where x is order item ID'
    )
    order_item_weight: Optional[float] = Field(
        None, description='Defines orders specified by order item weight'
    )


class OrderPreestimateShippingList(BaseModel):
    customer_email: Optional[str] = Field(
        None, description='Retrieves orders specified by customer email'
    )
    customer_id: Optional[str] = Field(
        None, description='Retrieves orders specified by customer id'
    )
    exclude: Optional[str] = Field(
        None,
        description='Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all',
    )
    order_item: List[OrderItemItem1]
    params: Optional[str] = Field(
        'force_all',
        description='Set this parameter in order to choose which entity fields you want to retrieve',
    )
    shipp_address_1: Optional[str] = Field(
        None, description='Specifies first shipping address'
    )
    shipp_city: Optional[str] = Field(None, description='Specifies shipping city')
    shipp_country: str = Field(..., description='Specifies shipping country code')
    shipp_postcode: Optional[str] = Field(
        None, description='Specifies shipping postcode'
    )
    shipp_state: Optional[str] = Field(
        None, description='Specifies shipping state code'
    )
    store_id: Optional[str] = Field(None, description='Store Id')
    warehouse_id: Optional[str] = Field(
        None,
        description='This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
    )


class Item(BaseModel):
    order_product_id: Optional[str] = None
    price: Optional[float] = None
    quantity: Optional[int] = None


class OrderRefundAdd(BaseModel):
    date: Optional[str] = Field(
        None, description='Specifies an order creation date in format Y-m-d H:i:s'
    )
    fee_price: Optional[float] = Field(None, description="Specifies refund's fee price")
    is_online: Optional[bool] = Field(
        False, description='Indicates whether refund type is online'
    )
    item_restock: Optional[bool] = Field(
        False,
        description='Boolean, whether or not to add the line items back to the store inventory.',
    )
    items: Optional[List[Item]] = Field(
        None, description='Defines items in the order that will be refunded'
    )
    message: Optional[str] = Field(
        None,
        description='Refund reason, or some else message which assigned to refund.',
    )
    order_id: Optional[str] = Field(
        None, description='Defines the order for which the refund will be created.'
    )
    send_notifications: Optional[bool] = Field(
        False, description='Send notifications to customer after refund was created'
    )
    shipping_price: Optional[float] = Field(
        None, description='Defines refund shipping amount.'
    )
    total_price: Optional[float] = Field(
        None, description='Defines order refund amount.'
    )


class Item1(BaseModel):
    order_product_id: Optional[str] = None
    quantity: Optional[float] = None


class TrackingNumber(BaseModel):
    carrier_id: Optional[str] = None
    tracking_number: Optional[str] = None


class OrderShipmentAdd(BaseModel):
    adjust_stock: Optional[bool] = Field(
        False, description='This parameter is used for adjust stock.'
    )
    enable_cache: Optional[bool] = Field(
        False,
        description="If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.",
    )
    is_shipped: Optional[bool] = Field(True, description="Defines shipment's status")
    items: Optional[List[Item1]] = Field(
        None, description='Defines items in the order that will be shipped'
    )
    order_id: Optional[str] = Field(
        None, description='Defines the order for which the shipment will be created'
    )
    send_notifications: Optional[bool] = Field(
        False, description='Send notifications to customer after shipment was created'
    )
    shipment_provider: Optional[str] = Field(
        None, description='Defines company name that provide tracking of shipment'
    )
    shipping_method: Optional[str] = Field(None, description='Define shipping method')
    store_id: Optional[str] = Field(None, description='Store Id')
    tracking_link: Optional[str] = Field(
        None, description='Defines custom tracking link'
    )
    tracking_numbers: Optional[List[TrackingNumber]] = Field(
        None,
        description='Defines shipment\'s tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = "https://api2cart.com/docs/#/cart/CartInfo">cart.info</a > method',
    )
    warehouse_id: Optional[str] = Field(
        None,
        description='This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
    )


class OrderShipmentTrackingAdd(BaseModel):
    carrier_id: Optional[str] = Field(None, description='Defines tracking carrier id')
    order_id: Optional[str] = Field(None, description='Defines the order id')
    send_notifications: Optional[bool] = Field(
        False, description='Send notifications to customer after tracking was created'
    )
    shipment_id: str = Field(
        ..., description='Shipment id indicates the number of delivery'
    )
    store_id: Optional[str] = Field(None, description='Store Id')
    tracking_link: Optional[str] = Field(
        None, description='Defines custom tracking link'
    )
    tracking_number: str = Field(..., description='Defines tracking number')
    tracking_provider: Optional[str] = Field(
        None, description='Defines name of the company which provides shipment tracking'
    )


class OrderShipmentUpdate(BaseModel):
    is_shipped: Optional[bool] = Field(True, description="Defines shipment's status")
    order_id: Optional[str] = Field(
        None, description='Defines the order that will be updated'
    )
    replace: Optional[bool] = Field(True, description='Allows rewrite tracking numbers')
    shipment_id: str = Field(
        ..., description='Shipment id indicates the number of delivery'
    )
    store_id: Optional[str] = Field(None, description='Store Id')
    tracking_link: Optional[str] = Field(
        None, description='Defines custom tracking link'
    )
    tracking_numbers: Optional[List[TrackingNumber]] = Field(
        None,
        description='Defines shipment\'s tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = "https://api2cart.com/docs/#/cart/CartInfo">cart.info</a > method',
    )


class OrderItemOption(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None
    option_id: Optional[str] = None
    price: Optional[float] = None
    product_option_value_id: Optional[str] = None
    type: Optional[str] = None
    value: Optional[str] = None
    weight: Optional[float] = None


class OrderPaymentMethod(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None


class OrderPreestimateShipping(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    carrier_code: Optional[str] = None
    carrier_name: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    delivery_time: Optional[str] = None
    description: Optional[str] = None
    method_code: Optional[str] = None
    method_name: Optional[str] = None
    price: Optional[float] = None
    price_inc_tax: Optional[float] = None


class OrderShippingMethod(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None


class OrderStatusHistoryItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    comment: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    modified_time: Optional[A2CDateTime] = None
    name: Optional[str] = None
    notify: Optional[bool] = None


class OrderStatusRefundItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    order_product_id: Optional[str] = None
    product_id: Optional[str] = None
    qty: Optional[float] = None
    refund: Optional[float] = None
    variant_id: Optional[str] = None


class OrderTotal(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    shipping_ex_tax: Optional[float] = None
    subtotal_ex_tax: Optional[float] = None
    total: Optional[float] = None
    total_discount: Optional[float] = None
    total_paid: Optional[float] = None
    total_tax: Optional[float] = None
    wrapping_ex_tax: Optional[float] = None


class OrderTotals(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    discount: Optional[float] = None
    shipping: Optional[float] = None
    subtotal: Optional[float] = None
    tax: Optional[float] = None
    total: Optional[float] = None


class OrderTotalsNewDiscount(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    type: Optional[str] = None
    value: Optional[float] = None


class OrderTransaction(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[float] = None
    avs_message: Optional[str] = None
    avs_postal_resp_code: Optional[str] = None
    avs_street_resp_code: Optional[str] = None
    card_bin: Optional[str] = None
    card_brand: Optional[str] = None
    card_last_four: Optional[str] = None
    created_time: Optional[A2CDateTime] = None
    currency: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    cvv_code: Optional[str] = None
    cvv_message: Optional[str] = None
    description: Optional[str] = None
    gateway: Optional[str] = None
    id: Optional[str] = None
    is_test_mode: Optional[bool] = None
    order_id: Optional[str] = None
    parent_id: Optional[str] = None
    reference_number: Optional[str] = None
    settlement_amount: Optional[float] = None
    settlement_created_time: Optional[A2CDateTime] = None
    settlement_currency: Optional[str] = None
    status: Optional[str] = None
    transaction_id: Optional[str] = None


class Pagination(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    next: Optional[str] = None
    previous: Optional[str] = None


class Plugin(BaseModel):
    active: Optional[bool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None


class PluginList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    all_plugins: Optional[int] = None
    custom_fields: Optional[Dict[str, Any]] = None
    plugins: Optional[List[Plugin]] = None


class File(BaseModel):
    name: str
    url: str


class GroupPrice(BaseModel):
    group_id: Optional[str] = None
    price: Optional[float] = None


class SellerProfiles(BaseModel):
    payment_profile_id: Optional[str] = None
    return_profile_id: Optional[str] = None
    shipping_profile_id: Optional[str] = None


class ShippingDetail(BaseModel):
    shipping_cost: Optional[float] = None
    shipping_service: Optional[str] = None
    shipping_type: Optional[str] = None


class TierPrice(BaseModel):
    price: Optional[float] = None
    quantity: Optional[float] = None


class ProductAdd(BaseModel):
    attribute_name: Optional[str] = Field(
        None,
        description='Defines productâ€™s attribute name separated with a comma in Magento',
    )
    attribute_set_name: Optional[str] = Field(
        'Default', description='Defines productâ€™s attribute set name in Magento'
    )
    avail_from: Optional[str] = Field(
        None,
        description='Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.',
    )
    available_for_sale: Optional[bool] = Field(
        True, description='Specifies the set of visible/invisible products for sale'
    )
    available_for_view: Optional[bool] = Field(
        True, description='Specifies the set of visible/invisible products for users'
    )
    backorder_status: Optional[str] = Field(None, description='Set backorder status')
    barcode: Optional[str] = Field(
        None,
        description='A barcode is a unique code composed of numbers used as a product identifier.',
    )
    best_offer: Optional[List[str]] = Field(
        None,
        description='The price at which Best Offers are automatically accepted.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>',
    )
    brand_name: Optional[str] = Field(
        None, description='Retrieves brands specified by brand name'
    )
    categories_ids: Optional[str] = Field(
        None,
        description='Defines product add that is specified by comma-separated categories id',
    )
    category_id: Optional[str] = Field(
        None, description='Defines product add that is specified by category id'
    )
    clear_cache: Optional[bool] = Field(True, description='Is cache clear required')
    condition: Optional[str] = Field(
        None, description='The human-readable label for the condition (e.g., "New").'
    )
    cost_price: Optional[float] = Field(
        None, description="Defines new product's cost price"
    )
    country_of_origin: Optional[str] = Field(
        None, description='The country where the inventory item was made'
    )
    created_at: Optional[str] = Field(
        None, description='Defines the date of entity creation'
    )
    description: str = Field(
        ..., description="Defines product's description that has to be added"
    )
    downloadable: Optional[bool] = Field(
        False, description='Defines whether the product is downloadable'
    )
    ean: Optional[str] = Field(
        None,
        description='European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.',
    )
    files: Optional[List[File]] = Field(None, description='File Url')
    group_prices: Optional[List[GroupPrice]] = Field(
        None, description="Defines product's group prices"
    )
    gtin: Optional[str] = Field(
        None,
        description='Global Trade Item Number. An GTIN is an identifier for trade items.',
    )
    harmonized_system_code: Optional[str] = Field(
        None,
        description='Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes',
    )
    height: Optional[float] = Field(None, description="Defines product's height")
    image_name: Optional[str] = Field(None, description="Defines image's name")
    image_url: Optional[str] = Field(None, description='Image Url')
    isbn: Optional[str] = Field(
        None,
        description='International Standard Book Number. An ISBN is a unique identifier for books.',
    )
    lang_id: Optional[str] = Field(None, description='Language id')
    length: Optional[float] = Field(None, description="Defines product's length")
    listing_duration: Optional[str] = Field(
        None,
        description='Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.',
    )
    listing_type: Optional[str] = Field(
        'FixedPrice',
        description='Indicates the selling format of the marketplace listing.',
    )
    manage_stock: Optional[bool] = Field(
        None, description='Defines inventory tracking for product'
    )
    manufacturer: Optional[str] = Field(
        None, description="Defines product's manufacturer"
    )
    marketplace_item_properties: Optional[str] = Field(
        False,
        description='String containing the JSON representation of the supplied data',
    )
    meta_description: Optional[str] = Field(
        None, description='Defines unique meta description of a entity'
    )
    meta_keywords: Optional[str] = Field(
        None, description='Defines unique meta keywords for each entity'
    )
    meta_title: Optional[str] = Field(
        None, description='Defines unique meta title for each entity'
    )
    model: str = Field(..., description="Defines product's model that has to be added")
    mpn: Optional[str] = Field(
        None,
        description='Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.',
    )
    name: str = Field(..., description="Defines product's name that has to be added")
    old_price: Optional[float] = Field(None, description="Defines product's old price")
    ordered_count: Optional[int] = Field(
        0, description='Defines how many times the product was ordered'
    )
    package_details: Optional[List[str]] = Field(
        None,
        description='If the seller is subscribed to "Business Policies", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>',
    )
    payment_methods: Optional[List[str]] = Field(
        None,
        description='Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>',
    )
    paypal_email: Optional[str] = Field(
        None,
        description='Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.',
    )
    price: float = Field(
        ..., description="Defines product's price that has to be added"
    )
    product_class: Optional[str] = Field(
        None, description='A categorization for the product'
    )
    quantity: Optional[float] = Field(
        0, description="Defines product's quantity that has to be added"
    )
    return_accepted: Optional[bool] = Field(
        None,
        description='Indicates whether the seller allows the buyer to return the item.',
    )
    sales_tax: Optional[List[str]] = Field(
        None,
        description='Percent of an item\'s price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>',
    )
    search_keywords: Optional[str] = Field(
        None, description='Defines unique search keywords'
    )
    seller_profiles: Optional[SellerProfiles] = Field(
        None,
        description='If the seller is subscribed to "Business Policies", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">seller_profiles[<b>shipping_profile_id</b>] = integer</br>seller_profiles[<b>payment_profile_id</b>] = integer</br>seller_profiles[<b>return_profile_id</b>] = integer</br></code></div></div>',
    )
    seo_url: Optional[str] = Field(None, description='Defines unique URL for SEO')
    shipping_details: Optional[List[ShippingDetail]] = Field(
        None,
        description='The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style="font-style:normal">Param structure:<div style="margin-left: 2%;"><code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>',
    )
    shipping_template_id: Optional[int] = Field(
        0,
        description='The numeric ID of the shipping template associated with the products in Etsy.',
    )
    short_description: Optional[str] = Field(
        None, description='Defines short description'
    )
    sku: Optional[str] = Field(
        None, description="Defines product's sku that has to be added"
    )
    special_price: Optional[float] = Field(
        None, description="Defines product's model that has to be added"
    )
    specifics: Optional[List[str]] = Field(
        None,
        description='An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.\n        <hr>\n        <div style="font-style:normal">Param structure:\n          <div style="margin-left: 2%;">\n            <code style="padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;">\n              specifics[int][<b>name</b>] = string</br>\n              specifics[int][<b>value</b>] = string</br>\n            </code>\n          </div>\n        </div>',
    )
    sprice_create: Optional[str] = Field(
        None, description='Defines the date of special price creation'
    )
    sprice_expire: Optional[str] = Field(
        None, description='Defines the term of special price offer duration'
    )
    sprice_modified: Optional[str] = Field(
        None, description='Defines the date of special price modification'
    )
    status: Optional[str] = Field(None, description="Defines product's status")
    store_id: Optional[str] = Field(None, description='Store Id')
    stores_ids: Optional[str] = Field(
        0,
        description="Assign product to the stores that is specified by comma-separated stores' id",
    )
    tags: Optional[str] = Field(None, description='Product tags')
    tax_class_id: Optional[int] = Field(
        None, description='Defines tax classes where entity has to be added'
    )
    taxable: Optional[bool] = Field(
        True, description='Specifies whether a tax is charged'
    )
    tier_prices: Optional[List[TierPrice]] = Field(
        None, description="Defines product's tier prices"
    )
    type: Optional[str] = Field('simple', description="Defines product's type")
    upc: Optional[str] = Field(
        None,
        description='Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.',
    )
    url: Optional[str] = Field(None, description="Defines unique product's URL")
    viewed_count: Optional[int] = Field(
        0, description="Specifies the number of product's reviews"
    )
    visible: Optional[str] = Field(None, description='Set visibility status')
    warehouse_id: Optional[str] = Field(
        None,
        description='This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
    )
    weight: Optional[float] = Field(0, description='Weight')
    weight_unit: Optional[str] = Field(None, description='Weight Unit')
    wholesale_price: Optional[float] = Field(
        None, description="Defines product's sale price"
    )
    width: Optional[float] = Field(None, description="Defines product's width")


class Type(Enum):
    small = 'small'
    base = 'base'
    additional = 'additional'
    thumbnail = 'thumbnail'


class ProductImageAdd(BaseModel):
    content: Optional[str] = Field(
        None, description='Content(body) encoded in base64 of image file'
    )
    image_name: str = Field(..., description="Defines image's name")
    label: Optional[str] = Field(
        None,
        description='Defines alternative text that has to be attached to the picture',
    )
    lang_id: Optional[str] = Field(
        None, description='Add product image on specified language id'
    )
    mime: Optional[str] = Field(
        None,
        description='Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.',
    )
    position: Optional[int] = Field(
        0, description='Defines imageâ€™s position in the list'
    )
    product_id: Optional[str] = Field(
        None, description='Defines product id where the image should be added'
    )
    product_variant_id: Optional[int] = Field(
        None, description="Defines product's variants specified by variant id"
    )
    store_id: Optional[str] = Field(None, description='Store Id')
    type: Type = Field(
        ...,
        description="Defines image's types that are specified by comma-separated list",
    )
    url: Optional[str] = Field(
        None, description='Defines URL of the image that has to be added'
    )
    variant_ids: Optional[str] = Field(
        None, description="Defines product's variants ids"
    )


class ProductPriceAdd(BaseModel):
    group_prices: Optional[List[GroupPrice]] = Field(
        None, description="Defines product's group prices"
    )
    product_id: Optional[str] = Field(
        None, description='Defines the product to which the price has to be added'
    )


class GroupPrice2(BaseModel):
    group_id: Optional[str] = None
    id: Optional[int] = None
    price: Optional[float] = None


class ProductPriceUpdate(BaseModel):
    group_prices: Optional[List[GroupPrice2]] = Field(
        None, description="Defines product's group prices"
    )
    product_id: Optional[str] = Field(
        None, description='Defines the product where the price has to be updated'
    )


class TaxRate(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    value: Optional[float] = None


class ProductTaxAdd(BaseModel):
    name: str = Field(
        ..., description='Defines tax class name where tax has to be added'
    )
    product_id: Optional[str] = Field(
        None, description='Defines products specified by product id'
    )
    tax_rates: List[TaxRate] = Field(
        ..., description='Defines tax rates of specified tax classes'
    )


class Attribute(BaseModel):
    attribute_name: Optional[str] = None
    attribute_price: Optional[float] = None
    attribute_value: Optional[str] = None


class ProductVariantAdd(BaseModel):
    attributes: Optional[List[Attribute]] = Field(
        None, description="Defines variant's attributes list"
    )
    available_for_sale: Optional[bool] = Field(
        True,
        description="Specifies the set of visible/invisible product's variants for sale",
    )
    available_for_view: Optional[bool] = Field(
        True,
        description="Specifies the set of visible/invisible product's variants for users",
    )
    barcode: Optional[str] = Field(
        None,
        description='A barcode is a unique code composed of numbers used as a product identifier.',
    )
    clear_cache: Optional[bool] = Field(True, description='Is cache clear required')
    cost_price: Optional[float] = Field(
        None, description="Defines new product's cost price"
    )
    country_of_origin: Optional[str] = Field(
        None, description='The country where the inventory item was made'
    )
    created_at: Optional[str] = Field(
        None, description='Defines the date of entity creation'
    )
    description: Optional[str] = Field(
        None, description="Specifies variant's description"
    )
    harmonized_system_code: Optional[str] = Field(
        None,
        description='Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes',
    )
    height: Optional[float] = Field(None, description="Defines product's height")
    lang_id: Optional[str] = Field(None, description='Language id')
    length: Optional[float] = Field(None, description="Defines product's length")
    manage_stock: Optional[bool] = Field(
        None, description='Defines inventory tracking for product variant'
    )
    manufacturer: Optional[str] = Field(
        None, description="Specifies the product variant's manufacturer"
    )
    meta_description: Optional[str] = Field(
        None, description='Defines unique meta description of a entity'
    )
    meta_keywords: Optional[str] = Field(
        None, description='Defines unique meta keywords for each entity'
    )
    meta_title: Optional[str] = Field(
        None, description='Defines unique meta title for each entity'
    )
    model: str = Field(
        ..., description="Specifies variant's model that has to be added"
    )
    name: Optional[str] = Field(
        None, description="Defines variant's name that has to be added"
    )
    price: Optional[float] = Field(
        None, description="Defines new product's variant price"
    )
    product_id: Optional[str] = Field(
        None, description="Defines product's id where the variant has to be added"
    )
    quantity: Optional[float] = Field(
        0, description="Defines product variant's quantity that has to be added"
    )
    short_description: Optional[str] = Field(
        None, description='Defines short description'
    )
    sku: Optional[str] = Field(
        None, description="Defines variant's sku that has to be added"
    )
    special_price: Optional[float] = Field(
        None, description="Specifies variant's model that has to be added"
    )
    sprice_create: Optional[str] = Field(
        None, description='Defines the date of special price creation'
    )
    sprice_expire: Optional[str] = Field(
        None, description='Defines the term of special price offer duration'
    )
    sprice_modified: Optional[str] = Field(
        None, description='Defines the date of special price modification'
    )
    store_id: Optional[str] = Field(
        None, description='Add variants specified by store id'
    )
    tax_class_id: Optional[int] = Field(
        None, description='Defines tax classes where entity has to be added'
    )
    taxable: Optional[bool] = Field(
        True, description='Specifies whether a tax is charged'
    )
    url: Optional[str] = Field(None, description="Defines unique product variant's URL")
    warehouse_id: Optional[str] = Field(
        None,
        description='This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
    )
    weight: Optional[float] = Field(0, description='Weight')
    weight_unit: Optional[str] = Field(None, description='Weight Unit')
    width: Optional[float] = Field(None, description="Defines product's width")


class ProductVariantImageAdd(BaseModel):
    content: Optional[str] = Field(
        None, description='Content(body) encoded in base64 of image file'
    )
    image_name: str = Field(..., description="Defines image's name")
    label: Optional[str] = Field(
        None,
        description='Defines alternative text that has to be attached to the picture',
    )
    mime: Optional[str] = Field(
        None,
        description='Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.',
    )
    option_id: Optional[str] = Field(
        None,
        description='Defines option id of the product variant for which the image will be added',
    )
    position: Optional[int] = Field(
        0, description='Defines imageâ€™s position in the list'
    )
    product_id: Optional[str] = Field(
        None, description='Defines product id where the variant image has to be added'
    )
    product_variant_id: int = Field(
        ..., description="Defines product's variants specified by variant id"
    )
    store_id: Optional[str] = Field(None, description='Store Id')
    type: Type = Field(
        ...,
        description="Defines image's types that are specified by comma-separated list",
    )
    url: Optional[str] = Field(
        None, description='Defines URL of the image that has to be added'
    )


class GroupPrice3(BaseModel):
    group_id: Optional[str] = None
    price: Optional[float] = None


class ProductVariantPriceAdd(BaseModel):
    group_prices: Optional[List[GroupPrice3]] = Field(
        None, description="Defines variants's group prices"
    )
    id: Optional[str] = Field(
        None, description='Defines the variant to which the price has to be added'
    )


class GroupPrice4(BaseModel):
    group_id: Optional[str] = None
    id: Optional[int] = None
    price: Optional[float] = None


class ProductVariantPriceUpdate(BaseModel):
    group_prices: Optional[List[GroupPrice4]] = Field(
        None, description="Defines variants's group prices"
    )
    id: Optional[str] = Field(
        None, description='Defines the variant where the price has to be updated'
    )


class ProductAdvancedPrice(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    expire_time: Optional[A2CDateTime] = None
    group_id: Optional[str] = None
    id: Optional[str] = None
    quantity_from: Optional[float] = None
    start_time: Optional[A2CDateTime] = None
    value: Optional[float] = None


class ProductAttribute(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    attribute_group_id: Optional[str] = None
    attribute_id: Optional[str] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    lang_id: Optional[str] = None
    name: Optional[str] = None
    position: Optional[int] = None
    product_id: Optional[str] = None
    required: Optional[bool] = None
    store_id: Optional[str] = None
    type: Optional[str] = None
    value: Optional[str] = None
    variant_id: Optional[str] = None
    visible: Optional[bool] = None


class ProductChildItemCombination(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    option_id: Optional[str] = None
    option_value_id: Optional[str] = None


class ProductGroupItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    child_item_id: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_qty_in_pack: Optional[str] = None
    is_qty_in_pack_fixed: Optional[bool] = None
    product_id: Optional[str] = None


class ProductGroupPrice(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    expire_time: Optional[str] = None
    group_id: Optional[str] = None
    id: Optional[str] = None
    price: Optional[float] = None
    quantity: Optional[float] = None
    start_time: Optional[str] = None
    store_id: Optional[str] = None


class ProductInventory(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    in_stock: Optional[bool] = None
    priority: Optional[int] = None
    quantity: Optional[float] = None
    warehouse_id: Optional[str] = None


class ProductOptionItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    price: Optional[str] = None
    product_option_item_id: Optional[str] = None
    quantity: Optional[int] = None
    sku: Optional[str] = None
    sort_order: Optional[int] = None
    type_price: Optional[str] = None
    weight: Optional[str] = None


class ProductReviewRating(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    value: Optional[int] = None


class ProductTierPrice(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    price: Optional[float] = None
    qty: Optional[float] = None


class ResponseCartGiftcardListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    gift_card: Optional[List[GiftCard]] = None


class ResponseCartMetaDataListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    items: Optional[List[CartMetaData]] = None
    total_count: Optional[int] = None


class ResponseCustomerGroupListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    group: Optional[List[CustomerGroup]] = None
    group_count: Optional[int] = None


class ResponseOrderPreestimateShippingListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    preestimate_shippings: Optional[List[OrderPreestimateShipping]] = None
    preestimate_shippings_count: Optional[int] = None


class ResponseOrderTransactionListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    transactions: Optional[List[OrderTransaction]] = None
    transactions_count: Optional[int] = None


class ResponseProductAttributeListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    attribute: Optional[List[ProductAttribute]] = None
    custom_fields: Optional[Dict[str, Any]] = None


class Script(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    event: Optional[str] = None
    html: Optional[str] = None
    id: Optional[str] = None
    load_method: Optional[str] = None
    modified_time: Optional[A2CDateTime] = None
    name: Optional[str] = None
    scope: Optional[str] = None
    src: Optional[str] = None


class ShipmentItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    model: Optional[str] = None
    name: Optional[str] = None
    order_product_id: Optional[str] = None
    price: Optional[float] = None
    product_id: Optional[str] = None
    quantity: Optional[float] = None
    variant_id: Optional[str] = None


class ShipmentTrackingNumber(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    carrier_id: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    tracking_number: Optional[str] = None


class SpecialPrice(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    created_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    expired_at: Optional[A2CDateTime] = None
    modified_at: Optional[A2CDateTime] = None
    value: Optional[float] = None


class State(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None


class StoreAttribute(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_values: Optional[List[str]] = None
    id: Optional[str] = None
    lang_id: Optional[str] = None
    name: Optional[str] = None
    position: Optional[int] = None
    required: Optional[bool] = None
    store_id: Optional[str] = None
    system: Optional[bool] = None
    type: Optional[str] = None
    values: Optional[List[str]] = None
    visible: Optional[bool] = None


class StoreAttributeGroup(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    assigned_attribute_ids: Optional[List[str]] = None
    attribute_set_id: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    position: Optional[int] = None


class Subscriber(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    created_time: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: Optional[str] = None
    email: Optional[str] = None
    first_name: Optional[str] = None
    id: Optional[str] = None
    last_name: Optional[str] = None
    modified_time: Optional[str] = None
    subscribed: Optional[bool] = None


class TaxClassZipCodesRange(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    from_: Optional[str] = Field(None, alias='from')
    to: Optional[str] = None


class Webhook(BaseModel):
    action: Optional[str] = None
    active: Optional[bool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    callback: Optional[str] = None
    created_at: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    entity: Optional[str] = None
    fields: Optional[str] = None
    id: Optional[int] = None
    label: Optional[str] = None
    store_id: Optional[str] = None
    updated_at: Optional[str] = None


class HybrisWebsites(RootModel[List[str]]):
    root: List[str]


class Type2(Enum):
    text = 'text'
    select = 'select'
    textarea = 'textarea'
    date = 'date'
    price = 'price'
    multiselect = 'multiselect'
    boolean = 'boolean'


class Entity(Enum):
    order = 'order'
    order_shipping_address = 'order_shipping_address'
    product = 'product'
    customer = 'customer'


class Key(Enum):
    total = 'total'
    subtotal = 'subtotal'
    shipping_total = 'shipping_total'
    total_quantity = 'total_quantity'
    total_weight = 'total_weight'
    country = 'country'
    product_id = 'product_id'
    variant_id = 'variant_id'
    category_id = 'category_id'
    customer_id = 'customer_id'
    item_price = 'item_price'
    item_total_price = 'item_total_price'
    item_quantity = 'item_quantity'


class Operator(Enum):
    field__ = '=='
    field_ = '<'
    field___1 = '<='
    field__1 = '>'
    field___2 = '>='
    ONE_OF = 'ONE_OF'


class Type4(Enum):
    base = 'base'
    thumbnail = 'thumbnail'


class OrderStatusIds(RootModel[List[str]]):
    root: List[str]


class ProductAttributes(RootModel[List[str]]):
    root: List[str]


class Type6(Enum):
    option_type_select = 'option_type_select'
    option_type_text = 'option_type_text'
    option_type_radio = 'option_type_radio'
    option_type_checkbox = 'option_type_checkbox'
    option_type_textarea = 'option_type_textarea'
    option_type_readonly = 'option_type_readonly'
    option_type_multiselect = 'option_type_multiselect'
    option_type_multicheckbox = 'option_type_multicheckbox'
    option_type_file = 'option_type_file'
    option_type_date = 'option_type_date'
    option_type_datetime = 'option_type_datetime'
    option_type_time = 'option_type_time'


class Options(RootModel[List[str]]):
    root: List[str]


class BasketItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    options: Optional[List[BasketItemOption]] = None
    parent_id: Optional[str] = None
    price: Optional[float] = None
    product_id: Optional[str] = None
    quantity: Optional[float] = None
    sku: Optional[str] = None
    tax: Optional[float] = None
    variant_id: Optional[str] = None
    weight: Optional[float] = None
    weight_unit: Optional[str] = None


class Brand(BaseModel):
    active: Optional[bool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    created_time: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    full_description: Optional[str] = None
    id: Optional[str] = None
    images: Optional[List[Image]] = None
    meta_description: Optional[str] = None
    meta_keywords: Optional[str] = None
    meta_title: Optional[str] = None
    modified_time: Optional[str] = None
    name: Optional[str] = None
    short_description: Optional[str] = None
    stores_ids: Optional[List[str]] = None
    url: Optional[str] = None


class Carrier(BaseModel):
    active: Optional[bool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    shipping_methods: Optional[List[OrderShippingMethod]] = None


class CartStoreInfo(BaseModel):
    active: Optional[bool] = None
    additional_fields: Optional[Dict[str, Any]] = None
    carrier_info: Optional[List[Carrier]] = None
    channels: Optional[List[CartChannel]] = None
    country: Optional[str] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_warehouse_id: Optional[str] = None
    dimension_unit: Optional[str] = None
    language: Optional[str] = None
    multi_store_url: Optional[str] = None
    name: Optional[str] = None
    prices_include_tax: Optional[bool] = None
    root_category_id: Optional[str] = None
    store_currencies: Optional[List[Currency]] = None
    store_id: Optional[str] = None
    store_languages: Optional[List[Language]] = None
    store_owner_info: Optional[Info] = None
    timezone: Optional[str] = None
    weight_unit: Optional[str] = None


class CatalogPriceRuleAction(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    apply_to: Optional[str] = None
    conditions: Optional[List[CouponCondition]] = None
    currency_code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    include_tax: Optional[bool] = None
    quantity: Optional[float] = None
    scope: Optional[str] = None
    type: Optional[str] = None
    value: Optional[float] = None


class Category(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    created_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    id: Optional[str] = None
    images: Optional[List[Image]] = None
    keywords: Optional[str] = None
    meta_description: Optional[str] = None
    meta_title: Optional[str] = None
    modified_at: Optional[A2CDateTime] = None
    name: Optional[str] = None
    parent_id: Optional[str] = None
    path: Optional[str] = None
    seo_url: Optional[str] = None
    short_description: Optional[str] = None
    sort_order: Optional[int] = None
    stores_ids: Optional[List[str]] = None


class Child(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    advanced_price: Optional[List[ProductAdvancedPrice]] = None
    allow_backorders: Optional[bool] = None
    avail_for_sale: Optional[bool] = None
    combination: Optional[List[ProductChildItemCombination]] = None
    cost_price: Optional[float] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default_price: Optional[float] = None
    default_qty_in_pack: Optional[float] = None
    dimensions_unit: Optional[str] = None
    ean: Optional[str] = None
    full_description: Optional[str] = None
    gtin: Optional[str] = None
    height: Optional[float] = None
    id: Optional[str] = None
    images: Optional[List[Image]] = None
    in_stock: Optional[bool] = None
    inventory: Optional[List[ProductInventory]] = None
    inventory_level: Optional[float] = None
    is_qty_in_pack_fixed: Optional[bool] = None
    isbn: Optional[str] = None
    length: Optional[float] = None
    list_price: Optional[float] = None
    manage_stock: Optional[bool] = None
    meta_description: Optional[str] = None
    meta_keywords: Optional[str] = None
    meta_title: Optional[str] = None
    min_quantity: Optional[float] = None
    modified_time: Optional[A2CDateTime] = None
    mpn: Optional[str] = None
    name: Optional[str] = None
    parent_id: Optional[str] = None
    short_description: Optional[str] = None
    sku: Optional[str] = None
    sort_order: Optional[int] = None
    tax_class_id: Optional[str] = None
    upc: Optional[str] = None
    weight: Optional[float] = None
    weight_unit: Optional[str] = None
    wholesale_price: Optional[float] = None
    width: Optional[float] = None


class CouponAction(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    amount: Optional[float] = None
    apply_to: Optional[str] = None
    conditions: Optional[List[CouponCondition]] = None
    currency_code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    discount_quantity_step: Optional[int] = None
    discounted_quantity: Optional[float] = None
    include_tax: Optional[bool] = None
    logic_operator: Optional[str] = None
    scope: Optional[str] = None
    type: Optional[str] = None


class CustomerAddress(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    address1: Optional[str] = None
    address2: Optional[str] = None
    city: Optional[str] = None
    company: Optional[str] = None
    country: Optional[Country] = None
    custom_fields: Optional[Dict[str, Any]] = None
    default: Optional[bool] = None
    fax: Optional[str] = None
    first_name: Optional[str] = None
    gender: Optional[str] = None
    id: Optional[str] = None
    last_name: Optional[str] = None
    phone: Optional[str] = None
    postcode: Optional[str] = None
    region: Optional[str] = None
    state: Optional[State] = None
    type: Optional[str] = None
    website: Optional[str] = None


class CustomerAttribute(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    attribute_id: Optional[str] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    name: Optional[str] = None
    type: Optional[str] = None
    values: Optional[List[CustomerAttributeValue]] = None


class ModelResponseCartGiftCardList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCartGiftcardListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCartMetaDataList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCartMetaDataListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCustomerGroupList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCustomerGroupListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseOrderPreestimateShippingList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseOrderPreestimateShippingListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseOrderTransactionList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseOrderTransactionListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseProductAttributeList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseProductAttributeListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class OrderItem(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    barcode: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    discount_amount: Optional[float] = None
    model: Optional[str] = None
    name: Optional[str] = None
    options: Optional[List[OrderItemOption]] = None
    order_product_id: Optional[str] = None
    parent_order_product_id: Optional[str] = None
    price: Optional[float] = None
    price_inc_tax: Optional[float] = None
    product_id: Optional[str] = None
    quantity: Optional[float] = None
    tax_percent: Optional[float] = None
    tax_value: Optional[float] = None
    tax_value_after_discount: Optional[float] = None
    total_price: Optional[float] = None
    variant_id: Optional[str] = None
    weight: Optional[float] = None
    weight_unit: Optional[str] = None


class OrderRefund(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    comment: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    fee: Optional[float] = None
    id: Optional[str] = None
    items: Optional[List[OrderStatusRefundItem]] = None
    modified_time: Optional[A2CDateTime] = None
    shipping: Optional[float] = None
    tax: Optional[float] = None
    total: Optional[float] = None


class OrderStatusRefund(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    comment: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    fee: Optional[float] = None
    refunded_items: Optional[List[OrderStatusRefundItem]] = None
    shipping: Optional[float] = None
    tax: Optional[float] = None
    time: Optional[A2CDateTime] = None
    total_refunded: Optional[float] = None


class ProductOption(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    available: Optional[bool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    option_items: Optional[List[ProductOptionItem]] = None
    product_option_id: Optional[str] = None
    required: Optional[bool] = None
    sort_order: Optional[int] = None
    type: Optional[str] = None
    used_in_combination: Optional[bool] = None


class ProductReview(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer_id: Optional[str] = None
    email: Optional[str] = None
    id: Optional[str] = None
    message: Optional[str] = None
    nick_name: Optional[str] = None
    product_id: Optional[str] = None
    rating: Optional[float] = None
    ratings: Optional[List[ProductReviewRating]] = None
    status: Optional[str] = None
    summary: Optional[str] = None


class ResponseAttributeListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    attribute: Optional[List[StoreAttribute]] = None
    attributes_count: Optional[int] = None
    custom_fields: Optional[Dict[str, Any]] = None


class ResponseCartScriptListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    scripts: Optional[List[Script]] = None
    total_count: Optional[int] = None


class ResponseCategoryListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    categories_count: Optional[int] = None
    category: Optional[List[Category]] = None
    custom_fields: Optional[Dict[str, Any]] = None


class ResponseCustomerAttributeListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    items: Optional[List[CustomerAttribute]] = None
    total_count: Optional[int] = None


class ResponseProductChildItemListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    children: Optional[List[Child]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    total_count: Optional[int] = None


class Shipment(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    created_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    is_shipped: Optional[bool] = None
    items: Optional[List[ShipmentItem]] = None
    modified_time: Optional[A2CDateTime] = None
    order_id: Optional[str] = None
    shipment_provider: Optional[str] = None
    tracking_numbers: Optional[List[ShipmentTrackingNumber]] = None
    warehouse_id: Optional[str] = None


class TaxClassZipCodes(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    fields: Optional[List[TaxClassZipCodesRange]] = None
    is_range: Optional[bool] = None
    range: Optional[List[str]] = None


class Basket(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    basket_products: Optional[List[BasketItem]] = None
    basket_url: Optional[str] = None
    created_at: Optional[A2CDateTime] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[BaseCustomer] = None
    id: Optional[str] = None
    modified_at: Optional[A2CDateTime] = None


class CartWarehouse(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    address: Optional[CustomerAddress] = None
    avail: Optional[bool] = None
    carriers_ids: Optional[List[str]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    stores_ids: Optional[List[str]] = None


class CatalogPriceRule(BaseModel):
    actions: Optional[List[CatalogPriceRuleAction]] = None
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    conditions: Optional[List[CouponCondition]] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    date_end: Optional[A2CDateTime] = None
    date_start: Optional[A2CDateTime] = None
    description: Optional[str] = None
    gid: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    short_description: Optional[str] = None
    type: Optional[str] = None
    usage_count: Optional[float] = None
    uses_per_order_limit: Optional[int] = None


class Coupon(BaseModel):
    actions: Optional[List[CouponAction]] = None
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    code: Optional[str] = None
    codes: Optional[List[CouponCode]] = None
    conditions: Optional[List[CouponCondition]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    date_end: Optional[A2CDateTime] = None
    date_start: Optional[A2CDateTime] = None
    description: Optional[str] = None
    id: Optional[str] = None
    logic_operator: Optional[str] = None
    name: Optional[str] = None
    priority: Optional[int] = None
    usage_history: Optional[List[CouponHistory]] = None
    usage_limit: Optional[int] = None
    usage_limit_per_customer: Optional[int] = None
    used_times: Optional[int] = None


class Customer(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    address_book: Optional[List[CustomerAddress]] = None
    birth_day: Optional[A2CDateTime] = None
    company: Optional[str] = None
    created_time: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    email: Optional[str] = None
    fax: Optional[str] = None
    first_name: Optional[str] = None
    gender: Optional[str] = None
    group: Optional[List[CustomerGroup]] = None
    id: Optional[str] = None
    ip_address: Optional[str] = None
    last_login: Optional[A2CDateTime] = None
    last_name: Optional[str] = None
    last_order_id: Optional[str] = None
    login: Optional[str] = None
    modified_time: Optional[A2CDateTime] = None
    news_letter_subscription: Optional[bool] = None
    orders_count: Optional[int] = None
    phone: Optional[str] = None
    status: Optional[str] = None
    stores_ids: Optional[List[str]] = None
    website: Optional[str] = None


class ModelResponseAttributeList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseAttributeListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCartScriptList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCartScriptListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCategoryList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCategoryListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCustomerAttributeList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCustomerAttributeListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseProductChildItemList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseProductChildItemListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class OrderAbandoned(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    basket_id: Optional[str] = None
    basket_url: Optional[str] = None
    created_at: Optional[A2CDateTime] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[BaseCustomer] = None
    id: Optional[str] = None
    modified_at: Optional[A2CDateTime] = None
    order_products: Optional[List[OrderItem]] = None
    totals: Optional[OrderTotals] = None


class OrderStatus(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    history: Optional[List[OrderStatusHistoryItem]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    refund_info: Optional[OrderStatusRefund] = None


class Product(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    advanced_price: Optional[List[ProductAdvancedPrice]] = None
    avail_sale: Optional[bool] = None
    avail_view: Optional[bool] = None
    backorders: Optional[str] = None
    categories_ids: Optional[List[str]] = None
    cost_price: Optional[float] = None
    create_at: Optional[A2CDateTime] = None
    custom_fields: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    dimensions_unit: Optional[str] = None
    group_items: Optional[List[ProductGroupItem]] = None
    group_price: Optional[List[ProductGroupPrice]] = None
    height: Optional[float] = None
    id: Optional[str] = None
    images: Optional[List[Image]] = None
    inventory: Optional[List[ProductInventory]] = None
    is_downloadable: Optional[bool] = None
    is_stock_managed: Optional[bool] = None
    is_virtual: Optional[bool] = None
    length: Optional[float] = None
    manage_stock: Optional[str] = None
    meta_description: Optional[str] = None
    meta_keywords: Optional[str] = None
    meta_title: Optional[str] = None
    modified_at: Optional[A2CDateTime] = None
    name: Optional[str] = None
    price: Optional[float] = None
    product_options: Optional[List[ProductOption]] = None
    quantity: Optional[float] = None
    related_products_ids: Optional[List[str]] = None
    seo_url: Optional[str] = None
    short_description: Optional[str] = None
    sort_order: Optional[int] = None
    special_price: Optional[SpecialPrice] = None
    stores_ids: Optional[List[str]] = None
    tax_class_id: Optional[str] = None
    tier_price: Optional[List[ProductTierPrice]] = None
    type: Optional[str] = None
    u_brand: Optional[str] = None
    u_brand_id: Optional[str] = None
    u_model: Optional[str] = None
    u_mpn: Optional[str] = None
    u_sku: Optional[str] = None
    u_upc: Optional[str] = None
    url: Optional[str] = None
    weight: Optional[float] = None
    weight_unit: Optional[str] = None
    width: Optional[float] = None


class ResponseCartCatalogPriceRulesListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    catalog_price_rules: Optional[List[CatalogPriceRule]] = None
    catalog_price_rules_count: Optional[int] = None
    custom_fields: Optional[Dict[str, Any]] = None


class ResponseCartCouponListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    coupon: Optional[List[Coupon]] = None
    coupon_count: Optional[int] = None
    custom_fields: Optional[Dict[str, Any]] = None


class ResponseCustomerListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[List[Customer]] = None
    customers_count: Optional[int] = None


class ResponseOrderAbandonedListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    order: Optional[List[OrderAbandoned]] = None


class ResponseOrderShipmentListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    shipment: Optional[List[Shipment]] = None
    shipment_count: Optional[int] = None


class ResponseProductListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    product: Optional[List[Product]] = None
    products_count: Optional[int] = None


class TaxClassStates(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    tax: Optional[float] = None
    tax_type: Optional[int] = None
    zip_codes: Optional[List[TaxClassZipCodes]] = None


class Cart(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    db_prefix: Optional[str] = None
    name: Optional[str] = None
    shipping_zones: Optional[List[CartShippingZone]] = None
    stores_info: Optional[List[CartStoreInfo]] = None
    url: Optional[str] = None
    version: Optional[str] = None
    warehouses: Optional[List[CartWarehouse]] = None


class ModelResponseCartCatalogPriceRulesList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCartCatalogPriceRulesListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCartCouponList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCartCouponListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseCustomerList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseCustomerListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseOrderAbandonedList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseOrderAbandonedListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseOrderShipmentList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseOrderShipmentListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class ModelResponseProductList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseProductListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class Order(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    basket_id: Optional[str] = None
    billing_address: Optional[CustomerAddress] = None
    bundles: Optional[List[OrderItem]] = None
    channel_id: Optional[str] = None
    comment: Optional[str] = None
    create_at: Optional[A2CDateTime] = None
    currency: Optional[Currency] = None
    custom_fields: Optional[Dict[str, Any]] = None
    customer: Optional[BaseCustomer] = None
    discounts: Optional[List[OrderTotalsNewDiscount]] = None
    finished_time: Optional[A2CDateTime] = None
    gift_message: Optional[str] = None
    id: Optional[str] = None
    modified_at: Optional[A2CDateTime] = None
    order_details_url: Optional[str] = None
    order_id: Optional[str] = None
    order_products: Optional[List[OrderItem]] = None
    payment_method: Optional[OrderPaymentMethod] = None
    refunds: Optional[List[OrderRefund]] = None
    shipping_address: Optional[CustomerAddress] = None
    shipping_method: Optional[OrderShippingMethod] = None
    shipping_methods: Optional[List[OrderShippingMethod]] = None
    status: Optional[OrderStatus] = None
    store_id: Optional[str] = None
    total: Optional[OrderTotal] = None
    totals: Optional[OrderTotals] = None
    warehouses_ids: Optional[List[str]] = None


class ResponseOrderListResult(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    order: Optional[List[Order]] = None
    orders_count: Optional[int] = None


class TaxClassCountries(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    code: Optional[str] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    states: Optional[List[TaxClassStates]] = None
    tax: Optional[float] = None
    tax_type: Optional[int] = None


class TaxClassRate(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    address: Optional[List[str]] = None
    cities: Optional[List[str]] = None
    countries: Optional[List[TaxClassCountries]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    tax: Optional[float] = None
    tax_based_on: Optional[str] = None
    tax_type: Optional[int] = None
    zip_codes: Optional[List[TaxClassZipCodes]] = None


class ModelResponseOrderList(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    custom_fields: Optional[Dict[str, Any]] = None
    pagination: Optional[Pagination] = None
    result: Optional[ResponseOrderListResult] = None
    return_code: Optional[int] = None
    return_message: Optional[str] = None


class TaxClass(BaseModel):
    additional_fields: Optional[Dict[str, Any]] = None
    avail: Optional[bool] = None
    custom_fields: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    tax: Optional[float] = None
    tax_rates: Optional[List[TaxClassRate]] = None
    tax_type: Optional[int] = None


CouponCondition.model_rebuild()
